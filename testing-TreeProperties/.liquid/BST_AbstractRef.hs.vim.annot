1:1-1:1::BST_AbstractRef.$trModule :: "GHC.Types.Module"
28:1-28:6::BST_AbstractRef.empty :: "forall a b .\n{VV : (BST_AbstractRef.Tree <\\x2 VV -> {VV : a | VV < x2}, \\x2 VV -> {VV : a | VV > x2}> a b) | size VV == 0}"
34:1-34:10::BST_AbstractRef.singleton :: "forall a b .\na -> b -> {VV : (BST_AbstractRef.Tree <\\x2 VV -> {VV : a | VV < x2}, \\x2 VV -> {VV : a | VV > x2}> a b) | size VV == 1}"
34:11-34:12::k :: "a"
34:13-34:14::v :: "a"
34:22-34:23::k :: "{VV : a | VV == k}"
34:24-34:25::v :: "{VV : a | VV == v}"
34:26-34:29::_ :: "{VV : forall a b <r :: a a -> Bool, l :: a a -> Bool>.\n      {v : (BST_AbstractRef.Tree <\\x4 VV -> {VV : a<l x4> | true}, \\x4 VV -> {VV : a<r x4> | true}> a b) | size v == 0\n                                                                                                           && height v == 0\n                                                                                                           && v == Nil} | VV == Nil}"
34:30-34:33::_ :: "{VV : forall a b <r :: a a -> Bool, l :: a a -> Bool>.\n      {v : (BST_AbstractRef.Tree <\\x4 VV -> {VV : a<l x4> | true}, \\x4 VV -> {VV : a<r x4> | true}> a b) | size v == 0\n                                                                                                           && height v == 0\n                                                                                                           && v == Nil} | VV == Nil}"
39:1-39:5::BST_AbstractRef.size :: "forall a b .\nx1:(BST_AbstractRef.Tree <\\x2 VV -> {VV : a | VV < x2}, \\x2 VV -> {VV : a | VV > x2}> a b) -> {VV : GHC.Types.Int | VV == size x1\n                                                                                                                    && VV >= 0}"
39:23-39:24::lq_anf$##7205759403792806349 :: "{v : GHC.Prim.Int# | v == 0}"
40:23-40:24::lq_anf$##7205759403792806351 :: "GHC.Types.Int"
40:27-40:33::lq_anf$##7205759403792806352 :: "{v : GHC.Types.Int | v == size l\n                     && v >= 0}"
40:32-40:33::l :: "{v : (BST_AbstractRef.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> a b) | height v >= 0\n                                                                                               && v == l}"
40:36-40:42::lq_anf$##7205759403792806354 :: "{v : GHC.Types.Int | v == size r\n                     && v >= 0}"
40:41-40:42::r :: "{v : (BST_AbstractRef.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> a b) | height v >= 0\n                                                                                               && v == r}"
46:1-46:7::BST_AbstractRef.height :: "forall a b .\nx1:(BST_AbstractRef.Tree <\\x2 VV -> {VV : a | VV < x2}, \\x2 VV -> {VV : a | VV > x2}> a b) -> {VV : GHC.Types.Int | VV == height x1\n                                                                                                                    && VV >= 0}"
46:25-46:26::lq_anf$##7205759403792806356 :: "{v : GHC.Prim.Int# | v == 0}"
47:25-47:26::lq_anf$##7205759403792806358 :: "GHC.Types.Int"
47:29-47:54::lq_anf$##7205759403792806361 :: "GHC.Types.Int"
47:33-47:43::lq_anf$##7205759403792806359 :: "{v : GHC.Types.Int | v == height l\n                     && v >= 0}"
47:41-47:42::l :: "{v : (BST_AbstractRef.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV < k} b) | size v >= 0\n                                                                                                               && v == l}"
47:44-47:54::lq_anf$##7205759403792806360 :: "{v : GHC.Types.Int | v == height r\n                     && v >= 0}"
47:52-47:53::r :: "{v : (BST_AbstractRef.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV > k} b) | size v >= 0\n                                                                                                               && v == r}"
53:1-53:4::BST_AbstractRef.set :: "forall a b .\n(GHC.Classes.Ord<[]> a) =>\nx2:(BST_AbstractRef.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> a b) -> a -> b -> {VV : (BST_AbstractRef.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> a b) | size VV == size x2\n                                                                                                                                                                                                        || size VV == size x2 + 1}"
53:9-53:10::k :: "a"
53:11-53:12::v :: "a"
53:16-53:29::BST_AbstractRef.singleton :: "{VV : forall a b .\n      x1:a -> x2:b -> {v : (BST_AbstractRef.Tree <\\x7 VV -> {VV : a | VV < x7}, \\x7 VV -> {VV : a | VV > x7}> a b) | size v == 1\n                                                                                                                     && v == singleton x1 x2\n                                                                                                                     && v == Node x1 x2 Nil Nil} | VV == singleton}"
53:26-53:27::k :: "{VV : a | VV == k}"
53:28-53:29::v :: "{VV : a | VV == v}"
55:7-55:9::k :: "{VV : a | VV == k}"
55:12-55:13::k :: "{VV : a | VV == k}"
55:20-55:44::BST_AbstractRef.Node :: "{VV : forall a b <r :: a a -> Bool, l :: a a -> Bool>.\n      x1:a -> x2:b -> x3:(BST_AbstractRef.Tree <\\x14 VV -> {VV : a<l x14> | true}, \\x14 VV -> {VV : a<r x14> | true}> {VV : a<l x1> | true} b) -> x4:(BST_AbstractRef.Tree <\\x14 VV -> {VV : a<l x14> | true}, \\x14 VV -> {VV : a<r x14> | true}> {VV : a<r x1> | true} b) -> {v : (BST_AbstractRef.Tree <\\x14 VV -> {VV : a<l x14> | true}, \\x14 VV -> {VV : a<r x14> | true}> a b) | tr v == x4\n                                                                                                                                                                                                                                                                                                                                                                                       && tl v == x3\n                                                                                                                                                                                                                                                                                                                                                                                       && val v == x2\n                                                                                                                                                                                                                                                                                                                                                                                       && key v == x1\n                                                                                                                                                                                                                                                                                                                                                                                       && size v == (1 + size x3) + size x4\n                                                                                                                                                                                                                                                                                                                                                                                       && height v == 1 + (if height x3 > height x4 then height x3 else height x4)\n                                                                                                                                                                                                                                                                                                                                                                                       && v == Node x1 x2 x3 x4} | VV == Node}"
55:25-55:26::k :: "{VV : a | VV == k}"
55:27-55:28::v :: "{VV : a | VV == v}"
55:29-55:42::lq_anf$##7205759403792805988 :: "{v' : (BST_AbstractRef.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> a b) | size v' == size l\n                                                                                                || size v' == size l + 1\n                                                                                                && v' == set l k v}"
55:34-55:35::l :: "{v : (BST_AbstractRef.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV < k} b) | size v >= 0\n                                                                                                               && height v >= 0\n                                                                                                               && v == l}"
55:36-55:38::k :: "{VV : a | VV == k}"
55:39-55:41::v :: "{VV : a | VV == v}"
55:43-55:44::r :: "{v : (BST_AbstractRef.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV > k} b) | size v >= 0\n                                                                                                               && height v >= 0\n                                                                                                               && v == r}"
56:7-56:9::k :: "{VV : a | VV == k}"
56:12-56:13::k :: "{VV : a | VV == k}"
56:20-56:44::BST_AbstractRef.Node :: "{VV : forall a b <r :: a a -> Bool, l :: a a -> Bool>.\n      x1:a -> x2:b -> x3:(BST_AbstractRef.Tree <\\x14 VV -> {VV : a<l x14> | true}, \\x14 VV -> {VV : a<r x14> | true}> {VV : a<l x1> | true} b) -> x4:(BST_AbstractRef.Tree <\\x14 VV -> {VV : a<l x14> | true}, \\x14 VV -> {VV : a<r x14> | true}> {VV : a<r x1> | true} b) -> {v : (BST_AbstractRef.Tree <\\x14 VV -> {VV : a<l x14> | true}, \\x14 VV -> {VV : a<r x14> | true}> a b) | tr v == x4\n                                                                                                                                                                                                                                                                                                                                                                                       && tl v == x3\n                                                                                                                                                                                                                                                                                                                                                                                       && val v == x2\n                                                                                                                                                                                                                                                                                                                                                                                       && key v == x1\n                                                                                                                                                                                                                                                                                                                                                                                       && size v == (1 + size x3) + size x4\n                                                                                                                                                                                                                                                                                                                                                                                       && height v == 1 + (if height x3 > height x4 then height x3 else height x4)\n                                                                                                                                                                                                                                                                                                                                                                                       && v == Node x1 x2 x3 x4} | VV == Node}"
56:25-56:26::k :: "{VV : a | VV == k}"
56:27-56:28::v :: "{VV : a | VV == v}"
56:29-56:30::l :: "{v : (BST_AbstractRef.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV < k} b) | size v >= 0\n                                                                                                               && height v >= 0\n                                                                                                               && v == l}"
56:31-56:44::lq_anf$##7205759403792805987 :: "{v' : (BST_AbstractRef.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> a b) | size v' == size r\n                                                                                                || size v' == size r + 1\n                                                                                                && v' == set r k v}"
56:36-56:37::r :: "{v : (BST_AbstractRef.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV > k} b) | size v >= 0\n                                                                                                               && height v >= 0\n                                                                                                               && v == r}"
56:38-56:40::k :: "{VV : a | VV == k}"
56:41-56:43::v :: "{VV : a | VV == v}"
57:20-57:34::BST_AbstractRef.Node :: "{VV : forall a b <r :: a a -> Bool, l :: a a -> Bool>.\n      x1:a -> x2:b -> x3:(BST_AbstractRef.Tree <\\x14 VV -> {VV : a<l x14> | true}, \\x14 VV -> {VV : a<r x14> | true}> {VV : a<l x1> | true} b) -> x4:(BST_AbstractRef.Tree <\\x14 VV -> {VV : a<l x14> | true}, \\x14 VV -> {VV : a<r x14> | true}> {VV : a<r x1> | true} b) -> {v : (BST_AbstractRef.Tree <\\x14 VV -> {VV : a<l x14> | true}, \\x14 VV -> {VV : a<r x14> | true}> a b) | tr v == x4\n                                                                                                                                                                                                                                                                                                                                                                                       && tl v == x3\n                                                                                                                                                                                                                                                                                                                                                                                       && val v == x2\n                                                                                                                                                                                                                                                                                                                                                                                       && key v == x1\n                                                                                                                                                                                                                                                                                                                                                                                       && size v == (1 + size x3) + size x4\n                                                                                                                                                                                                                                                                                                                                                                                       && height v == 1 + (if height x3 > height x4 then height x3 else height x4)\n                                                                                                                                                                                                                                                                                                                                                                                       && v == Node x1 x2 x3 x4} | VV == Node}"
57:25-57:27::k :: "{VV : a | VV == k}"
57:28-57:30::v :: "{VV : a | VV == v}"
57:31-57:32::l :: "{v : (BST_AbstractRef.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV < k} b) | size v >= 0\n                                                                                                               && height v >= 0\n                                                                                                               && v == l}"
57:33-57:34::r :: "{v : (BST_AbstractRef.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV > k} b) | size v >= 0\n                                                                                                               && height v >= 0\n                                                                                                               && v == r}"
62:1-62:4::BST_AbstractRef.get :: "forall a b .\n(GHC.Classes.Ord<[]> a) =>\n(BST_AbstractRef.Tree <\\x2 VV -> {VV : a | VV < x2}, \\x2 VV -> {VV : a | VV > x2}> a b) -> a -> (Functions_Types.Maybe b)"
62:9-62:10::k :: "a"
62:16-62:23::_ :: "{VV : forall a .\n      {v : (Functions_Types.Maybe a) | (isJust v <=> false)\n                                       && v == Nothing} | VV == Nothing}"
64:7-64:9::k :: "{VV : a | VV == k}"
64:12-64:13::k :: "{VV : a | VV == k}"
64:19-64:27::BST_AbstractRef.get :: "forall a b .\n(GHC.Classes.Ord<[]> a) =>\n(BST_AbstractRef.Tree <\\x2 VV -> {VV : a | VV < x2}, \\x2 VV -> {VV : a | VV > x2}> a b) -> a -> (Functions_Types.Maybe b)"
64:23-64:24::l :: "{v : (BST_AbstractRef.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV < k} b) | size v >= 0\n                                                                                                               && height v >= 0\n                                                                                                               && v == l}"
64:25-64:27::k :: "{VV : a | VV == k}"
65:7-65:9::k :: "{VV : a | VV == k}"
65:12-65:13::k :: "{VV : a | VV == k}"
65:19-65:27::BST_AbstractRef.get :: "forall a b .\n(GHC.Classes.Ord<[]> a) =>\n(BST_AbstractRef.Tree <\\x2 VV -> {VV : a | VV < x2}, \\x2 VV -> {VV : a | VV > x2}> a b) -> a -> (Functions_Types.Maybe b)"
65:23-65:24::r :: "{v : (BST_AbstractRef.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV > k} b) | size v >= 0\n                                                                                                               && height v >= 0\n                                                                                                               && v == r}"
65:25-65:27::k :: "{VV : a | VV == k}"
66:19-66:25::Functions_Types.Just :: "{VV : forall a .\n      x1:a -> {v : (Functions_Types.Maybe a) | Just##lqdc##$select v == x1\n                                               && (isJust v <=> true)\n                                               && fromJust v == x1\n                                               && v == Just x1} | VV == Just}"
66:24-66:25::v :: "{VV : a | VV == v}"
72:1-72:11::BST_AbstractRef.lem_get_eq :: "forall a b .\n(GHC.Classes.Ord<[]> a) =>\nx2:(BST_AbstractRef.Tree <\\x2 VV -> {VV : a | VV < x2}, \\x2 VV -> {VV : a | VV > x2}> a b) -> x3:a -> x4:b -> {VV : () | get (set x2 x3 x4) x3 == Just x4}"
72:22-72:24::GHC.Tuple.() :: "{v : () | v == ()}"
74:7-74:10::ds_d3aP :: "a"
74:14-74:15::k :: "{VV : a | VV == k}"
74:25-74:27::GHC.Tuple.() :: "{v : () | v == ()}"
75:7-75:10::ds_d3aP :: "a"
75:14-75:15::k :: "{VV : a | VV == k}"
75:25-75:45::BST_AbstractRef.lem_get_eq :: "forall a b .\n(GHC.Classes.Ord<[]> a) =>\nx2:(BST_AbstractRef.Tree <\\x2 VV -> {VV : a | VV < x2}, \\x2 VV -> {VV : a | VV > x2}> a b) -> x3:a -> x4:b -> {VV : () | get (set x2 x3 x4) x3 == Just x4}"
75:36-75:37::l :: "{v : (BST_AbstractRef.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV < k} b) | size v >= 0\n                                                                                                               && height v >= 0\n                                                                                                               && v == l}"
75:38-75:41::ds_d3aP :: "a"
75:42-75:45::ds_d3aQ :: "a"
76:25-76:45::BST_AbstractRef.lem_get_eq :: "forall a b .\n(GHC.Classes.Ord<[]> a) =>\nx2:(BST_AbstractRef.Tree <\\x2 VV -> {VV : a | VV < x2}, \\x2 VV -> {VV : a | VV > x2}> a b) -> x3:a -> x4:b -> {VV : () | get (set x2 x3 x4) x3 == Just x4}"
76:36-76:37::r :: "{v : (BST_AbstractRef.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV > k} b) | size v >= 0\n                                                                                                               && height v >= 0\n                                                                                                               && v == r}"
76:38-76:41::ds_d3aP :: "a"
76:42-76:45::ds_d3aQ :: "a"
82:1-82:12::BST_AbstractRef.lem_get_neq :: "forall a b .\n(GHC.Classes.Ord<[]> a) =>\nx2:(BST_AbstractRef.Tree <\\x2 VV -> {VV : a | VV < x2}, \\x2 VV -> {VV : a | VV > x2}> a b) -> x3:a -> x4:{VV : a | VV /= x3} -> x5:b -> {VV : () | get (set x2 x4 x5) x3 == get x2 x3}"
82:17-82:19::k1 :: "a"
82:20-82:22::k2 :: "{VV : a | VV /= k1}"
83:7-83:9::k1 :: "{VV : a | VV == k1}"
83:12-83:14::k2 :: "{VV : a | VV /= k1\n          && VV == k2}"
83:29-83:31::GHC.Tuple.() :: "{v : () | v == ()}"
84:29-84:31::GHC.Tuple.() :: "{v : () | v == ()}"
86:7-86:9::k1 :: "{VV : a | VV == k1}"
86:13-86:14::k :: "{VV : a | VV == k}"
86:16-86:17::k :: "{VV : a | VV == k}"
86:21-86:23::k2 :: "{VV : a | VV /= k1\n          && VV == k2}"
86:29-86:31::GHC.Tuple.() :: "{v : () | v == ()}"
87:7-87:8::k :: "{VV : a | VV == k}"
87:13-87:15::k2 :: "{VV : a | VV /= k1\n          && VV == k2}"
87:29-87:31::GHC.Tuple.() :: "{v : () | v == ()}"
88:7-88:9::k1 :: "{VV : a | VV == k1}"
88:13-88:14::k :: "{VV : a | VV == k}"
88:16-88:17::k :: "{VV : a | VV == k}"
88:21-88:23::k2 :: "{VV : a | VV /= k1\n          && VV == k2}"
88:29-88:31::GHC.Tuple.() :: "{v : () | v == ()}"
89:7-89:9::k2 :: "{VV : a | VV /= k1\n          && VV == k2}"
89:13-89:14::k :: "{VV : a | VV == k}"
89:16-89:17::k :: "{VV : a | VV == k}"
89:21-89:23::k1 :: "{VV : a | VV == k1}"
89:29-89:31::GHC.Tuple.() :: "{v : () | v == ()}"
90:7-90:9::k2 :: "{VV : a | VV /= k1\n          && VV == k2}"
90:13-90:14::k :: "{VV : a | VV == k}"
90:16-90:17::k :: "{VV : a | VV == k}"
90:21-90:23::k1 :: "{VV : a | VV == k1}"
90:29-90:31::GHC.Tuple.() :: "{v : () | v == ()}"
91:7-91:9::k1 :: "{VV : a | VV == k1}"
91:12-91:13::k :: "{VV : a | VV == k}"
91:15-91:17::k2 :: "{VV : a | VV /= k1\n          && VV == k2}"
91:20-91:21::k :: "{VV : a | VV == k}"
91:29-91:51::BST_AbstractRef.lem_get_neq :: "forall a b .\n(GHC.Classes.Ord<[]> a) =>\nx2:(BST_AbstractRef.Tree <\\x2 VV -> {VV : a | VV < x2}, \\x2 VV -> {VV : a | VV > x2}> a b) -> x3:a -> x4:{VV : a | VV /= x3} -> x5:b -> {VV : () | get (set x2 x4 x5) x3 == get x2 x3}"
91:41-91:42::l :: "{v : (BST_AbstractRef.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV < k} b) | size v >= 0\n                                                                                                               && height v >= 0\n                                                                                                               && v == l}"
91:43-91:45::k1 :: "{VV : a | VV == k1}"
91:46-91:48::k2 :: "{VV : a | VV /= k1\n          && VV == k2}"
91:49-91:51::ds_d2UZ :: "a"
92:7-92:8::k :: "{VV : a | VV == k}"
92:11-92:13::k1 :: "{VV : a | VV == k1}"
92:15-92:16::k :: "{VV : a | VV == k}"
92:19-92:21::k2 :: "{VV : a | VV /= k1\n          && VV == k2}"
92:29-92:51::BST_AbstractRef.lem_get_neq :: "forall a b .\n(GHC.Classes.Ord<[]> a) =>\nx2:(BST_AbstractRef.Tree <\\x2 VV -> {VV : a | VV < x2}, \\x2 VV -> {VV : a | VV > x2}> a b) -> x3:a -> x4:{VV : a | VV /= x3} -> x5:b -> {VV : () | get (set x2 x4 x5) x3 == get x2 x3}"
92:41-92:42::r :: "{v : (BST_AbstractRef.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV > k} b) | size v >= 0\n                                                                                                               && height v >= 0\n                                                                                                               && v == r}"
92:43-92:45::k1 :: "{VV : a | VV == k1}"
92:46-92:48::k2 :: "{VV : a | VV /= k1\n          && VV == k2}"
92:49-92:51::ds_d2UZ :: "a"
101:1-101:7::BST_AbstractRef.exTree :: "() -> (BST_AbstractRef.Tree <\\x2 VV -> {VV : GHC.Types.Int | VV < x2}, \\x2 VV -> {VV : GHC.Types.Int | VV > x2}> GHC.Types.Int [GHC.Types.Char])"
101:16-101:54::lq_anf$##7205759403792806405 :: "(BST_AbstractRef.Tree <\\x9 VV -> {v : GHC.Types.Int | v < v}, \\x9 VV -> {v : GHC.Types.Int | v > v}> GHC.Types.Int [GHC.Types.Char])"
101:21-101:41::lq_anf$##7205759403792806400 :: "(BST_AbstractRef.Tree <\\x9 VV -> {v : GHC.Types.Int | v < v}, \\x9 VV -> {v : GHC.Types.Int | v > v}> GHC.Types.Int [GHC.Types.Char])"
101:26-101:29::_ :: "{VV : forall a b <r :: a a -> Bool, l :: a a -> Bool>.\n      {v : (BST_AbstractRef.Tree <\\x4 VV -> {VV : a<l x4> | true}, \\x4 VV -> {VV : a<r x4> | true}> a b) | size v == 0\n                                                                                                           && height v == 0\n                                                                                                           && v == Nil} | VV == Nil}"
101:30-101:32::lq_anf$##7205759403792806397 :: "GHC.Types.Int"
101:33-101:40::lq_anf$##7205759403792806399 :: "[GHC.Types.Char]"
101:42-101:44::lq_anf$##7205759403792806402 :: "GHC.Types.Int"
101:45-101:53::lq_anf$##7205759403792806404 :: "[GHC.Types.Char]"
101:55-101:57::lq_anf$##7205759403792806407 :: "GHC.Types.Int"
101:58-101:63::lq_anf$##7205759403792806409 :: "[GHC.Types.Char]"
105:1-105:7::BST_AbstractRef.propOK :: "() -> {VV : GHC.Types.Bool | VV}"
105:13-105:22::lq_anf$##7205759403792806413 :: "(Functions_Types.Maybe [GHC.Types.Char])"
105:17-105:19::ex :: "{v : (BST_AbstractRef.Tree <\\x10 VV -> {v : GHC.Types.Int | v < v}, \\x10 VV -> {v : GHC.Types.Int | v > v}> GHC.Types.Int [GHC.Types.Char]) | v == exTree ()\n                                                                                                                                              && v == set (set (set Nil 10 \"kitty\") 20 \"kitten\") 30 \"cat\"\n                                                                                                                                              && size v >= 0\n                                                                                                                                              && height v >= 0\n                                                                                                                                              && v == ex}"
105:20-105:22::lq_anf$##7205759403792806412 :: "GHC.Types.Int"
105:26-105:38::lq_anf$##7205759403792806416 :: "{v : (Functions_Types.Maybe [GHC.Types.Char]) | isJust v <=> true}"
105:31-105:38::lq_anf$##7205759403792806415 :: "[GHC.Types.Char]"
106:13-106:22::lq_anf$##7205759403792806420 :: "(Functions_Types.Maybe [GHC.Types.Char])"
106:17-106:19::ex :: "{v : (BST_AbstractRef.Tree <\\x10 VV -> {v : GHC.Types.Int | v < v}, \\x10 VV -> {v : GHC.Types.Int | v > v}> GHC.Types.Int [GHC.Types.Char]) | v == exTree ()\n                                                                                                                                              && v == set (set (set Nil 10 \"kitty\") 20 \"kitten\") 30 \"cat\"\n                                                                                                                                              && size v >= 0\n                                                                                                                                              && height v >= 0\n                                                                                                                                              && v == ex}"
106:20-106:22::lq_anf$##7205759403792806419 :: "GHC.Types.Int"
106:26-106:39::lq_anf$##7205759403792806423 :: "{v : (Functions_Types.Maybe [GHC.Types.Char]) | isJust v <=> true}"
106:31-106:39::lq_anf$##7205759403792806422 :: "[GHC.Types.Char]"
107:13-107:22::lq_anf$##7205759403792806427 :: "(Functions_Types.Maybe [GHC.Types.Char])"
107:17-107:19::ex :: "{v : (BST_AbstractRef.Tree <\\x10 VV -> {v : GHC.Types.Int | v < v}, \\x10 VV -> {v : GHC.Types.Int | v > v}> GHC.Types.Int [GHC.Types.Char]) | v == exTree ()\n                                                                                                                                              && v == set (set (set Nil 10 \"kitty\") 20 \"kitten\") 30 \"cat\"\n                                                                                                                                              && size v >= 0\n                                                                                                                                              && height v >= 0\n                                                                                                                                              && v == ex}"
107:20-107:22::lq_anf$##7205759403792806426 :: "GHC.Types.Int"
107:26-107:36::lq_anf$##7205759403792806430 :: "{v : (Functions_Types.Maybe [GHC.Types.Char]) | isJust v <=> true}"
107:31-107:36::lq_anf$##7205759403792806429 :: "[GHC.Types.Char]"
108:13-108:21::lq_anf$##7205759403792806434 :: "(Functions_Types.Maybe [GHC.Types.Char])"
108:17-108:19::ex :: "{v : (BST_AbstractRef.Tree <\\x10 VV -> {v : GHC.Types.Int | v < v}, \\x10 VV -> {v : GHC.Types.Int | v > v}> GHC.Types.Int [GHC.Types.Char]) | v == exTree ()\n                                                                                                                                              && v == set (set (set Nil 10 \"kitty\") 20 \"kitten\") 30 \"cat\"\n                                                                                                                                              && size v >= 0\n                                                                                                                                              && height v >= 0\n                                                                                                                                              && v == ex}"
108:20-108:21::lq_anf$##7205759403792806433 :: "GHC.Types.Int"
108:26-108:33::_ :: "{VV : forall a .\n      {v : (Functions_Types.Maybe a) | (isJust v <=> false)\n                                       && v == Nothing} | VV == Nothing}"
110:5-110:7::ex :: "{v : (BST_AbstractRef.Tree <\\x10 VV -> {v : GHC.Types.Int | v < v}, \\x10 VV -> {v : GHC.Types.Int | v > v}> GHC.Types.Int [GHC.Types.Char]) | v == exTree ()\n                                                                                                                                              && v == set (set (set Nil 10 \"kitty\") 20 \"kitten\") 30 \"cat\"}"
110:13-110:22::_ :: "{v : (BST_AbstractRef.Tree <\\x10 VV -> {v : GHC.Types.Int | v < v}, \\x10 VV -> {v : GHC.Types.Int | v > v}> GHC.Types.Int [GHC.Types.Char]) | v == exTree ()\n                                                                                                                                              && v == set (set (set Nil 10 \"kitty\") 20 \"kitten\") 30 \"cat\"}"
110:20-110:22::GHC.Tuple.() :: "{v : () | v == ()}"