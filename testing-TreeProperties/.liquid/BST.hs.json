{"status":"safe","types":{"84":{"7":{"ann":"{VV : a | VV == k}","ident":"k","row":84,"col":7},"13":{"ann":"{VV : a | VV /= k1\n          && VV == k2}","ident":"k2","row":84,"col":13},"29":{"ann":"{v : () | v == ()}","ident":"GHC.Tuple.()","row":84,"col":29}},"73":{"25":{"ann":"forall a b .\n(GHC.Classes.Ord<[]> a) =>\nx2:(BST.BSTree a b) -> x3:a -> x4:b -> {VV : () | lookup (insert x2 x3 x4) x3 == Just x4}","ident":"BST.lem_lookup_eq","row":73,"col":25},"45":{"ann":"a","ident":"ds_d3aM","row":73,"col":45},"39":{"ann":"{v : (BST.BSTree {VV : a | VV > k} b) | height v >= 0\n                                        && size v >= 0\n                                        && 0 <= size v\n                                        && 0 <= height v\n                                        && v == r}","ident":"r","row":73,"col":39},"41":{"ann":"a","ident":"ds_d3aL","row":73,"col":41}},"37":{"36":{"ann":"{v : GHC.Types.Int | v == size r\n                     && v >= 0}","ident":"lq_anf$##7205759403792806350","row":37,"col":36},"23":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792806347","row":37,"col":23},"27":{"ann":"{v : GHC.Types.Int | v == size l\n                     && v >= 0}","ident":"lq_anf$##7205759403792806348","row":37,"col":27},"41":{"ann":"{v : (BST.BSTree a b) | height v >= 0\n                        && 0 <= size v\n                        && 0 <= height v\n                        && v == r}","ident":"r","row":37,"col":41},"32":{"ann":"{v : (BST.BSTree a b) | height v >= 0\n                        && 0 <= size v\n                        && 0 <= height v\n                        && v == l}","ident":"l","row":37,"col":32}},"61":{"7":{"ann":"{VV : a | VV == k}","ident":"k","row":61,"col":7},"28":{"ann":"{VV : a | VV == k}","ident":"k","row":61,"col":28},"19":{"ann":"forall a b .\n(GHC.Classes.Ord<[]> a) =>\n(BST.BSTree a b) -> a -> (Functions_Types.Maybe b)","ident":"BST.lookup","row":61,"col":19},"12":{"ann":"{VV : a | VV == k}","ident":"k","row":61,"col":12},"26":{"ann":"{v : (BST.BSTree {VV : a | VV < k} b) | height v >= 0\n                                        && size v >= 0\n                                        && 0 <= size v\n                                        && 0 <= height v\n                                        && v == l}","ident":"l","row":61,"col":26}},"106":{"13":{"ann":"{v : (BST.BSTree GHC.Types.Int [GHC.Types.Char]) | v == exTree ()\n                                                   && v == insert (insert (insert Nil 10 \"cat\") 20 \"dog\") 30 \"zebra\"}","ident":"_","row":106,"col":13},"20":{"ann":"{v : () | v == ()}","ident":"GHC.Tuple.()","row":106,"col":20},"5":{"ann":"{v : (BST.BSTree GHC.Types.Int [GHC.Types.Char]) | v == exTree ()\n                                                   && v == insert (insert (insert Nil 10 \"cat\") 20 \"dog\") 30 \"zebra\"}","ident":"ex","row":106,"col":5}},"43":{"25":{"ann":"{v : GHC.Prim.Int# | v == 0}","ident":"lq_anf$##7205759403792806352","row":43,"col":25},"1":{"ann":"forall a b .\nx1:(BST.BSTree a b) -> {VV : GHC.Types.Int | VV == height x1\n                                             && VV >= 0}","ident":"BST.height","row":43,"col":1}},"31":{"13":{"ann":"a","ident":"v","row":31,"col":13},"22":{"ann":"{VV : a | VV == k}","ident":"k","row":31,"col":22},"30":{"ann":"{VV : forall a b .\n      {v : (BST.BSTree a b) | size v == 0\n                              && height v == 0\n                              && v == Nil} | VV == Nil}","ident":"_","row":31,"col":30},"1":{"ann":"forall a b . a -> b -> {t : (BST.BSTree a b) | size t == 1}","ident":"BST.singleton","row":31,"col":1},"26":{"ann":"{VV : forall a b .\n      {v : (BST.BSTree a b) | size v == 0\n                              && height v == 0\n                              && v == Nil} | VV == Nil}","ident":"_","row":31,"col":26},"11":{"ann":"a","ident":"k","row":31,"col":11},"24":{"ann":"{VV : a | VV == v}","ident":"v","row":31,"col":24}},"36":{"1":{"ann":"forall a b .\nx1:(BST.BSTree a b) -> {VV : GHC.Types.Int | VV == size x1\n                                             && VV >= 0}","ident":"BST.size","row":36,"col":1},"23":{"ann":"{v : GHC.Prim.Int# | v == 0}","ident":"lq_anf$##7205759403792806345","row":36,"col":23}},"85":{"7":{"ann":"{VV : a | VV == k1}","ident":"k1","row":85,"col":7},"13":{"ann":"{VV : a | VV == k}","ident":"k","row":85,"col":13},"29":{"ann":"{v : () | v == ()}","ident":"GHC.Tuple.()","row":85,"col":29},"16":{"ann":"{VV : a | VV == k}","ident":"k","row":85,"col":16},"21":{"ann":"{VV : a | VV /= k1\n          && VV == k2}","ident":"k2","row":85,"col":21}},"50":{"31":{"ann":"{VV : a | VV == v}","ident":"v","row":50,"col":31},"14":{"ann":"a","ident":"v","row":50,"col":14},"19":{"ann":"{VV : forall a b .\n      x1:a -> x2:b -> {v : (BST.BSTree a b) | size v == 1\n                                              && v == singleton x1 x2\n                                              && v == Node x1 x2 Nil Nil} | VV == singleton}","ident":"BST.singleton","row":50,"col":19},"29":{"ann":"{VV : a | VV == k}","ident":"k","row":50,"col":29},"12":{"ann":"a","ident":"k","row":50,"col":12},"1":{"ann":"forall a b .\n(GHC.Classes.Ord<[]> a) =>\nx2:(BST.BSTree a b) -> a -> b -> {t' : (BST.BSTree a b) | size t' == size x2\n                                                          || size t' == size x2 + 1}","ident":"BST.insert","row":50,"col":1}},"72":{"7":{"ann":"a","ident":"ds_d3aL","row":72,"col":7},"25":{"ann":"forall a b .\n(GHC.Classes.Ord<[]> a) =>\nx2:(BST.BSTree a b) -> x3:a -> x4:b -> {VV : () | lookup (insert x2 x3 x4) x3 == Just x4}","ident":"BST.lem_lookup_eq","row":72,"col":25},"14":{"ann":"{VV : a | VV == k}","ident":"k","row":72,"col":14},"45":{"ann":"a","ident":"ds_d3aM","row":72,"col":45},"39":{"ann":"{v : (BST.BSTree {VV : a | VV < k} b) | height v >= 0\n                                        && size v >= 0\n                                        && 0 <= size v\n                                        && 0 <= height v\n                                        && v == l}","ident":"l","row":72,"col":39},"41":{"ann":"a","ident":"ds_d3aL","row":72,"col":41}},"101":{"13":{"ann":"(Functions_Types.Maybe [GHC.Types.Char])","ident":"lq_anf$##7205759403792806409","row":101,"col":13},"29":{"ann":"{v : (Functions_Types.Maybe [GHC.Types.Char]) | isJust v <=> true}","ident":"lq_anf$##7205759403792806412","row":101,"col":29},"1":{"ann":"() -> {VV : GHC.Types.Bool | VV}","ident":"BST.propOK","row":101,"col":1},"23":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792806408","row":101,"col":23},"34":{"ann":"[GHC.Types.Char]","ident":"lq_anf$##7205759403792806411","row":101,"col":34},"20":{"ann":"{v : (BST.BSTree GHC.Types.Int [GHC.Types.Char]) | v == exTree ()\n                                                   && v == insert (insert (insert Nil 10 \"cat\") 20 \"dog\") 30 \"zebra\"\n                                                   && height v >= 0\n                                                   && size v >= 0\n                                                   && 0 <= size v\n                                                   && 0 <= height v\n                                                   && v == ex}","ident":"ex","row":101,"col":20}},"44":{"25":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792806354","row":44,"col":25},"44":{"ann":"{v : GHC.Types.Int | v == height r\n                     && v >= 0}","ident":"lq_anf$##7205759403792806356","row":44,"col":44},"29":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792806357","row":44,"col":29},"52":{"ann":"{v : (BST.BSTree {VV : a | VV > k} b) | size v >= 0\n                                        && 0 <= size v\n                                        && 0 <= height v\n                                        && v == r}","ident":"r","row":44,"col":52},"41":{"ann":"{v : (BST.BSTree {VV : a | VV < k} b) | size v >= 0\n                                        && 0 <= size v\n                                        && 0 <= height v\n                                        && v == l}","ident":"l","row":44,"col":41},"33":{"ann":"{v : GHC.Types.Int | v == height l\n                     && v >= 0}","ident":"lq_anf$##7205759403792806355","row":44,"col":33}},"88":{"15":{"ann":"{VV : a | VV /= k1\n          && VV == k2}","ident":"k2","row":88,"col":15},"7":{"ann":"{VV : a | VV == k1}","ident":"k1","row":88,"col":7},"49":{"ann":"{VV : a | VV /= k1\n          && VV == k2}","ident":"k2","row":88,"col":49},"44":{"ann":"{v : (BST.BSTree {VV : a | VV < k} b) | height v >= 0\n                                        && size v >= 0\n                                        && 0 <= size v\n                                        && 0 <= height v\n                                        && v == l}","ident":"l","row":88,"col":44},"29":{"ann":"forall a b .\n(GHC.Classes.Ord<[]> a) =>\nx2:(BST.BSTree a b) -> x3:a -> x4:{VV : a | VV /= x3} -> x5:b -> {VV : () | lookup (insert x2 x4 x5) x3 == lookup x2 x3}","ident":"BST.lem_lookup_neq","row":88,"col":29},"12":{"ann":"{VV : a | VV == k}","ident":"k","row":88,"col":12},"52":{"ann":"a","ident":"ds_d2UV","row":88,"col":52},"20":{"ann":"{VV : a | VV == k}","ident":"k","row":88,"col":20},"46":{"ann":"{VV : a | VV == k1}","ident":"k1","row":88,"col":46}},"83":{"7":{"ann":"{VV : a | VV == k1}","ident":"k1","row":83,"col":7},"13":{"ann":"{VV : a | VV == k}","ident":"k","row":83,"col":13},"29":{"ann":"{v : () | v == ()}","ident":"GHC.Tuple.()","row":83,"col":29},"16":{"ann":"{VV : a | VV == k}","ident":"k","row":83,"col":16},"21":{"ann":"{VV : a | VV /= k1\n          && VV == k2}","ident":"k2","row":83,"col":21}},"86":{"7":{"ann":"{VV : a | VV /= k1\n          && VV == k2}","ident":"k2","row":86,"col":7},"13":{"ann":"{VV : a | VV == k}","ident":"k","row":86,"col":13},"29":{"ann":"{v : () | v == ()}","ident":"GHC.Tuple.()","row":86,"col":29},"16":{"ann":"{VV : a | VV == k}","ident":"k","row":86,"col":16},"21":{"ann":"{VV : a | VV == k1}","ident":"k1","row":86,"col":21}},"53":{"7":{"ann":"{VV : a | VV == k}","ident":"k","row":53,"col":7},"25":{"ann":"{VV : a | VV == k}","ident":"k","row":53,"col":25},"31":{"ann":"{v' : (BST.BSTree a b) | size v' == size r\n                         || size v' == size r + 1\n                         && v' == insert r k v}","ident":"lq_anf$##7205759403792805983","row":53,"col":31},"44":{"ann":"{VV : a | VV == v}","ident":"v","row":53,"col":44},"29":{"ann":"{v : (BST.BSTree {VV : a | VV < k} b) | height v >= 0\n                                        && size v >= 0\n                                        && 0 <= size v\n                                        && 0 <= height v\n                                        && v == l}","ident":"l","row":53,"col":29},"12":{"ann":"{VV : a | VV == k}","ident":"k","row":53,"col":12},"20":{"ann":"{VV : forall a b .\n      x1:a -> x2:b -> x3:(BST.BSTree {VV : a | VV < x1} b) -> x4:(BST.BSTree {VV : a | VV > x1} b) -> {v : (BST.BSTree a b) | tright v == x4\n                                                                                                                              && tleft v == x3\n                                                                                                                              && tval v == x2\n                                                                                                                              && tkey v == x1\n                                                                                                                              && size v == (1 + size x3) + size x4\n                                                                                                                              && height v == 1 + (if height x3 > height x4 then height x3 else height x4)\n                                                                                                                              && v == Node x1 x2 x3 x4} | VV == Node}","ident":"BST.Node","row":53,"col":20},"39":{"ann":"{v : (BST.BSTree {VV : a | VV > k} b) | height v >= 0\n                                        && size v >= 0\n                                        && 0 <= size v\n                                        && 0 <= height v\n                                        && v == r}","ident":"r","row":53,"col":39},"27":{"ann":"{VV : a | VV == v}","ident":"v","row":53,"col":27},"41":{"ann":"{VV : a | VV == k}","ident":"k","row":53,"col":41}},"71":{"7":{"ann":"a","ident":"ds_d3aL","row":71,"col":7},"25":{"ann":"{v : () | v == ()}","ident":"GHC.Tuple.()","row":71,"col":25},"14":{"ann":"{VV : a | VV == k}","ident":"k","row":71,"col":14}},"89":{"15":{"ann":"{VV : a | VV == k}","ident":"k","row":89,"col":15},"7":{"ann":"{VV : a | VV == k}","ident":"k","row":89,"col":7},"49":{"ann":"{VV : a | VV /= k1\n          && VV == k2}","ident":"k2","row":89,"col":49},"19":{"ann":"{VV : a | VV /= k1\n          && VV == k2}","ident":"k2","row":89,"col":19},"44":{"ann":"{v : (BST.BSTree {VV : a | VV > k} b) | height v >= 0\n                                        && size v >= 0\n                                        && 0 <= size v\n                                        && 0 <= height v\n                                        && v == r}","ident":"r","row":89,"col":44},"29":{"ann":"forall a b .\n(GHC.Classes.Ord<[]> a) =>\nx2:(BST.BSTree a b) -> x3:a -> x4:{VV : a | VV /= x3} -> x5:b -> {VV : () | lookup (insert x2 x4 x5) x3 == lookup x2 x3}","ident":"BST.lem_lookup_neq","row":89,"col":29},"52":{"ann":"a","ident":"ds_d2UV","row":89,"col":52},"46":{"ann":"{VV : a | VV == k1}","ident":"k1","row":89,"col":46},"11":{"ann":"{VV : a | VV == k1}","ident":"k1","row":89,"col":11}},"1":{"1":{"ann":"GHC.Types.Module","ident":"BST.$trModule","row":1,"col":1}},"62":{"7":{"ann":"{VV : a | VV == k}","ident":"k","row":62,"col":7},"28":{"ann":"{VV : a | VV == k}","ident":"k","row":62,"col":28},"19":{"ann":"forall a b .\n(GHC.Classes.Ord<[]> a) =>\n(BST.BSTree a b) -> a -> (Functions_Types.Maybe b)","ident":"BST.lookup","row":62,"col":19},"12":{"ann":"{VV : a | VV == k}","ident":"k","row":62,"col":12},"26":{"ann":"{v : (BST.BSTree {VV : a | VV > k} b) | height v >= 0\n                                        && size v >= 0\n                                        && 0 <= size v\n                                        && 0 <= height v\n                                        && v == r}","ident":"r","row":62,"col":26}},"26":{"1":{"ann":"forall a b . {VV : (BST.BSTree a b) | size VV == 0}","ident":"BST.empty","row":26,"col":1}},"59":{"19":{"ann":"{VV : forall a .\n      {v : (Functions_Types.Maybe a) | (isJust v <=> false)\n                                       && v == Nothing} | VV == Nothing}","ident":"_","row":59,"col":19},"12":{"ann":"a","ident":"k","row":59,"col":12},"1":{"ann":"forall a b .\n(GHC.Classes.Ord<[]> a) =>\n(BST.BSTree a b) -> a -> (Functions_Types.Maybe b)","ident":"BST.lookup","row":59,"col":1}},"52":{"37":{"ann":"{v : (BST.BSTree {VV : a | VV < k} b) | height v >= 0\n                                        && size v >= 0\n                                        && 0 <= size v\n                                        && 0 <= height v\n                                        && v == l}","ident":"l","row":52,"col":37},"7":{"ann":"{VV : a | VV == k}","ident":"k","row":52,"col":7},"25":{"ann":"{VV : a | VV == k}","ident":"k","row":52,"col":25},"29":{"ann":"{v' : (BST.BSTree a b) | size v' == size l\n                         || size v' == size l + 1\n                         && v' == insert l k v}","ident":"lq_anf$##7205759403792805984","row":52,"col":29},"12":{"ann":"{VV : a | VV == k}","ident":"k","row":52,"col":12},"20":{"ann":"{VV : forall a b .\n      x1:a -> x2:b -> x3:(BST.BSTree {VV : a | VV < x1} b) -> x4:(BST.BSTree {VV : a | VV > x1} b) -> {v : (BST.BSTree a b) | tright v == x4\n                                                                                                                              && tleft v == x3\n                                                                                                                              && tval v == x2\n                                                                                                                              && tkey v == x1\n                                                                                                                              && size v == (1 + size x3) + size x4\n                                                                                                                              && height v == 1 + (if height x3 > height x4 then height x3 else height x4)\n                                                                                                                              && v == Node x1 x2 x3 x4} | VV == Node}","ident":"BST.Node","row":52,"col":20},"39":{"ann":"{VV : a | VV == k}","ident":"k","row":52,"col":39},"46":{"ann":"{v : (BST.BSTree {VV : a | VV > k} b) | height v >= 0\n                                        && size v >= 0\n                                        && 0 <= size v\n                                        && 0 <= height v\n                                        && v == r}","ident":"r","row":52,"col":46},"27":{"ann":"{VV : a | VV == v}","ident":"v","row":52,"col":27},"42":{"ann":"{VV : a | VV == v}","ident":"v","row":52,"col":42}},"69":{"25":{"ann":"{v : () | v == ()}","ident":"GHC.Tuple.()","row":69,"col":25},"1":{"ann":"forall a b .\n(GHC.Classes.Ord<[]> a) =>\nx2:(BST.BSTree a b) -> x3:a -> x4:b -> {VV : () | lookup (insert x2 x3 x4) x3 == Just x4}","ident":"BST.lem_lookup_eq","row":69,"col":1}},"87":{"7":{"ann":"{VV : a | VV /= k1\n          && VV == k2}","ident":"k2","row":87,"col":7},"13":{"ann":"{VV : a | VV == k}","ident":"k","row":87,"col":13},"29":{"ann":"{v : () | v == ()}","ident":"GHC.Tuple.()","row":87,"col":29},"16":{"ann":"{VV : a | VV == k}","ident":"k","row":87,"col":16},"21":{"ann":"{VV : a | VV == k1}","ident":"k1","row":87,"col":21}},"103":{"13":{"ann":"(Functions_Types.Maybe [GHC.Types.Char])","ident":"lq_anf$##7205759403792806423","row":103,"col":13},"29":{"ann":"{v : (Functions_Types.Maybe [GHC.Types.Char]) | isJust v <=> true}","ident":"lq_anf$##7205759403792806426","row":103,"col":29},"23":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792806422","row":103,"col":23},"34":{"ann":"[GHC.Types.Char]","ident":"lq_anf$##7205759403792806425","row":103,"col":34},"20":{"ann":"{v : (BST.BSTree GHC.Types.Int [GHC.Types.Char]) | v == exTree ()\n                                                   && v == insert (insert (insert Nil 10 \"cat\") 20 \"dog\") 30 \"zebra\"\n                                                   && height v >= 0\n                                                   && size v >= 0\n                                                   && 0 <= size v\n                                                   && 0 <= height v\n                                                   && v == ex}","ident":"ex","row":103,"col":20}},"104":{"13":{"ann":"(Functions_Types.Maybe [GHC.Types.Char])","ident":"lq_anf$##7205759403792806430","row":104,"col":13},"29":{"ann":"{VV : forall a .\n      {v : (Functions_Types.Maybe a) | (isJust v <=> false)\n                                       && v == Nothing} | VV == Nothing}","ident":"_","row":104,"col":29},"23":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792806429","row":104,"col":23},"20":{"ann":"{v : (BST.BSTree GHC.Types.Int [GHC.Types.Char]) | v == exTree ()\n                                                   && v == insert (insert (insert Nil 10 \"cat\") 20 \"dog\") 30 \"zebra\"\n                                                   && height v >= 0\n                                                   && size v >= 0\n                                                   && 0 <= size v\n                                                   && 0 <= height v\n                                                   && v == ex}","ident":"ex","row":104,"col":20}},"63":{"19":{"ann":"{VV : forall a .\n      x1:a -> {v : (Functions_Types.Maybe a) | Just##lqdc##$select v == x1\n                                               && (isJust v <=> true)\n                                               && fromJust v == x1\n                                               && v == Just x1} | VV == Just}","ident":"Functions_Types.Just","row":63,"col":19},"24":{"ann":"{VV : a | VV == v}","ident":"v","row":63,"col":24}},"80":{"7":{"ann":"{VV : a | VV == k1}","ident":"k1","row":80,"col":7},"29":{"ann":"{v : () | v == ()}","ident":"GHC.Tuple.()","row":80,"col":29},"12":{"ann":"{VV : a | VV /= k1\n          && VV == k2}","ident":"k2","row":80,"col":12}},"102":{"13":{"ann":"(Functions_Types.Maybe [GHC.Types.Char])","ident":"lq_anf$##7205759403792806416","row":102,"col":13},"29":{"ann":"{v : (Functions_Types.Maybe [GHC.Types.Char]) | isJust v <=> true}","ident":"lq_anf$##7205759403792806419","row":102,"col":29},"23":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792806415","row":102,"col":23},"34":{"ann":"[GHC.Types.Char]","ident":"lq_anf$##7205759403792806418","row":102,"col":34},"20":{"ann":"{v : (BST.BSTree GHC.Types.Int [GHC.Types.Char]) | v == exTree ()\n                                                   && v == insert (insert (insert Nil 10 \"cat\") 20 \"dog\") 30 \"zebra\"\n                                                   && height v >= 0\n                                                   && size v >= 0\n                                                   && 0 <= size v\n                                                   && 0 <= height v\n                                                   && v == ex}","ident":"ex","row":102,"col":20}},"79":{"1":{"ann":"forall a b .\n(GHC.Classes.Ord<[]> a) =>\nx2:(BST.BSTree a b) -> x3:a -> x4:{VV : a | VV /= x3} -> x5:b -> {VV : () | lookup (insert x2 x4 x5) x3 == lookup x2 x3}","ident":"BST.lem_lookup_neq","row":79,"col":1},"23":{"ann":"{VV : a | VV /= k1}","ident":"k2","row":79,"col":23},"20":{"ann":"a","ident":"k1","row":79,"col":20}},"97":{"49":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792806398","row":97,"col":49},"19":{"ann":"(BST.BSTree GHC.Types.Int [GHC.Types.Char])","ident":"lq_anf$##7205759403792806401","row":97,"col":19},"35":{"ann":"{VV : forall a b .\n      {v : (BST.BSTree a b) | size v == 0\n                              && height v == 0\n                              && v == Nil} | VV == Nil}","ident":"_","row":97,"col":35},"1":{"ann":"x1:() -> {VV : (BST.BSTree GHC.Types.Int [GHC.Types.Char]) | VV == exTree x1\n                                                             && VV == insert (insert (insert Nil 10 \"cat\") 20 \"dog\") 30 \"zebra\"}","ident":"BST.exTree","row":97,"col":1},"62":{"ann":"[GHC.Types.Char]","ident":"lq_anf$##7205759403792806405","row":97,"col":62},"59":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792806403","row":97,"col":59},"52":{"ann":"[GHC.Types.Char]","ident":"lq_anf$##7205759403792806400","row":97,"col":52},"39":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792806393","row":97,"col":39},"27":{"ann":"(BST.BSTree GHC.Types.Int [GHC.Types.Char])","ident":"lq_anf$##7205759403792806396","row":97,"col":27},"42":{"ann":"[GHC.Types.Char]","ident":"lq_anf$##7205759403792806395","row":97,"col":42}},"54":{"25":{"ann":"{VV : a | VV == k}","ident":"k","row":54,"col":25},"28":{"ann":"{VV : a | VV == v}","ident":"v","row":54,"col":28},"31":{"ann":"{v : (BST.BSTree {VV : a | VV < k} b) | height v >= 0\n                                        && size v >= 0\n                                        && 0 <= size v\n                                        && 0 <= height v\n                                        && v == l}","ident":"l","row":54,"col":31},"20":{"ann":"{VV : forall a b .\n      x1:a -> x2:b -> x3:(BST.BSTree {VV : a | VV < x1} b) -> x4:(BST.BSTree {VV : a | VV > x1} b) -> {v : (BST.BSTree a b) | tright v == x4\n                                                                                                                              && tleft v == x3\n                                                                                                                              && tval v == x2\n                                                                                                                              && tkey v == x1\n                                                                                                                              && size v == (1 + size x3) + size x4\n                                                                                                                              && height v == 1 + (if height x3 > height x4 then height x3 else height x4)\n                                                                                                                              && v == Node x1 x2 x3 x4} | VV == Node}","ident":"BST.Node","row":54,"col":20},"33":{"ann":"{v : (BST.BSTree {VV : a | VV > k} b) | height v >= 0\n                                        && size v >= 0\n                                        && 0 <= size v\n                                        && 0 <= height v\n                                        && v == r}","ident":"r","row":54,"col":33}},"81":{"29":{"ann":"{v : () | v == ()}","ident":"GHC.Tuple.()","row":81,"col":29}}},"sptypes":[{"start":{"line":1,"column":1},"ann":"GHC.Types.Module","ident":"BST.$trModule","stop":{"line":1,"column":1}},{"start":{"line":26,"column":1},"ann":"forall a b . {VV : (BST.BSTree a b) | size VV == 0}","ident":"BST.empty","stop":{"line":26,"column":6}},{"start":{"line":31,"column":1},"ann":"forall a b . a -> b -> {t : (BST.BSTree a b) | size t == 1}","ident":"BST.singleton","stop":{"line":31,"column":10}},{"start":{"line":31,"column":11},"ann":"a","ident":"k","stop":{"line":31,"column":12}},{"start":{"line":31,"column":13},"ann":"a","ident":"v","stop":{"line":31,"column":14}},{"start":{"line":31,"column":22},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":31,"column":23}},{"start":{"line":31,"column":24},"ann":"{VV : a | VV == v}","ident":"v","stop":{"line":31,"column":25}},{"start":{"line":31,"column":26},"ann":"{VV : forall a b .\n      {v : (BST.BSTree a b) | size v == 0\n                              && height v == 0\n                              && v == Nil} | VV == Nil}","ident":"_","stop":{"line":31,"column":29}},{"start":{"line":31,"column":30},"ann":"{VV : forall a b .\n      {v : (BST.BSTree a b) | size v == 0\n                              && height v == 0\n                              && v == Nil} | VV == Nil}","ident":"_","stop":{"line":31,"column":33}},{"start":{"line":36,"column":1},"ann":"forall a b .\nx1:(BST.BSTree a b) -> {VV : GHC.Types.Int | VV == size x1\n                                             && VV >= 0}","ident":"BST.size","stop":{"line":36,"column":5}},{"start":{"line":36,"column":23},"ann":"{v : GHC.Prim.Int# | v == 0}","ident":"lq_anf$##7205759403792806345","stop":{"line":36,"column":24}},{"start":{"line":37,"column":23},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792806347","stop":{"line":37,"column":24}},{"start":{"line":37,"column":27},"ann":"{v : GHC.Types.Int | v == size l\n                     && v >= 0}","ident":"lq_anf$##7205759403792806348","stop":{"line":37,"column":33}},{"start":{"line":37,"column":32},"ann":"{v : (BST.BSTree a b) | height v >= 0\n                        && 0 <= size v\n                        && 0 <= height v\n                        && v == l}","ident":"l","stop":{"line":37,"column":33}},{"start":{"line":37,"column":36},"ann":"{v : GHC.Types.Int | v == size r\n                     && v >= 0}","ident":"lq_anf$##7205759403792806350","stop":{"line":37,"column":42}},{"start":{"line":37,"column":41},"ann":"{v : (BST.BSTree a b) | height v >= 0\n                        && 0 <= size v\n                        && 0 <= height v\n                        && v == r}","ident":"r","stop":{"line":37,"column":42}},{"start":{"line":43,"column":1},"ann":"forall a b .\nx1:(BST.BSTree a b) -> {VV : GHC.Types.Int | VV == height x1\n                                             && VV >= 0}","ident":"BST.height","stop":{"line":43,"column":7}},{"start":{"line":43,"column":25},"ann":"{v : GHC.Prim.Int# | v == 0}","ident":"lq_anf$##7205759403792806352","stop":{"line":43,"column":26}},{"start":{"line":44,"column":25},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792806354","stop":{"line":44,"column":26}},{"start":{"line":44,"column":29},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792806357","stop":{"line":44,"column":54}},{"start":{"line":44,"column":33},"ann":"{v : GHC.Types.Int | v == height l\n                     && v >= 0}","ident":"lq_anf$##7205759403792806355","stop":{"line":44,"column":43}},{"start":{"line":44,"column":41},"ann":"{v : (BST.BSTree {VV : a | VV < k} b) | size v >= 0\n                                        && 0 <= size v\n                                        && 0 <= height v\n                                        && v == l}","ident":"l","stop":{"line":44,"column":42}},{"start":{"line":44,"column":44},"ann":"{v : GHC.Types.Int | v == height r\n                     && v >= 0}","ident":"lq_anf$##7205759403792806356","stop":{"line":44,"column":54}},{"start":{"line":44,"column":52},"ann":"{v : (BST.BSTree {VV : a | VV > k} b) | size v >= 0\n                                        && 0 <= size v\n                                        && 0 <= height v\n                                        && v == r}","ident":"r","stop":{"line":44,"column":53}},{"start":{"line":50,"column":1},"ann":"forall a b .\n(GHC.Classes.Ord<[]> a) =>\nx2:(BST.BSTree a b) -> a -> b -> {t' : (BST.BSTree a b) | size t' == size x2\n                                                          || size t' == size x2 + 1}","ident":"BST.insert","stop":{"line":50,"column":7}},{"start":{"line":50,"column":12},"ann":"a","ident":"k","stop":{"line":50,"column":13}},{"start":{"line":50,"column":14},"ann":"a","ident":"v","stop":{"line":50,"column":15}},{"start":{"line":50,"column":19},"ann":"{VV : forall a b .\n      x1:a -> x2:b -> {v : (BST.BSTree a b) | size v == 1\n                                              && v == singleton x1 x2\n                                              && v == Node x1 x2 Nil Nil} | VV == singleton}","ident":"BST.singleton","stop":{"line":50,"column":32}},{"start":{"line":50,"column":29},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":50,"column":30}},{"start":{"line":50,"column":31},"ann":"{VV : a | VV == v}","ident":"v","stop":{"line":50,"column":32}},{"start":{"line":52,"column":7},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":52,"column":9}},{"start":{"line":52,"column":12},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":52,"column":13}},{"start":{"line":52,"column":20},"ann":"{VV : forall a b .\n      x1:a -> x2:b -> x3:(BST.BSTree {VV : a | VV < x1} b) -> x4:(BST.BSTree {VV : a | VV > x1} b) -> {v : (BST.BSTree a b) | tright v == x4\n                                                                                                                              && tleft v == x3\n                                                                                                                              && tval v == x2\n                                                                                                                              && tkey v == x1\n                                                                                                                              && size v == (1 + size x3) + size x4\n                                                                                                                              && height v == 1 + (if height x3 > height x4 then height x3 else height x4)\n                                                                                                                              && v == Node x1 x2 x3 x4} | VV == Node}","ident":"BST.Node","stop":{"line":52,"column":47}},{"start":{"line":52,"column":25},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":52,"column":26}},{"start":{"line":52,"column":27},"ann":"{VV : a | VV == v}","ident":"v","stop":{"line":52,"column":28}},{"start":{"line":52,"column":29},"ann":"{v' : (BST.BSTree a b) | size v' == size l\n                         || size v' == size l + 1\n                         && v' == insert l k v}","ident":"lq_anf$##7205759403792805984","stop":{"line":52,"column":45}},{"start":{"line":52,"column":37},"ann":"{v : (BST.BSTree {VV : a | VV < k} b) | height v >= 0\n                                        && size v >= 0\n                                        && 0 <= size v\n                                        && 0 <= height v\n                                        && v == l}","ident":"l","stop":{"line":52,"column":38}},{"start":{"line":52,"column":39},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":52,"column":41}},{"start":{"line":52,"column":42},"ann":"{VV : a | VV == v}","ident":"v","stop":{"line":52,"column":44}},{"start":{"line":52,"column":46},"ann":"{v : (BST.BSTree {VV : a | VV > k} b) | height v >= 0\n                                        && size v >= 0\n                                        && 0 <= size v\n                                        && 0 <= height v\n                                        && v == r}","ident":"r","stop":{"line":52,"column":47}},{"start":{"line":53,"column":7},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":53,"column":9}},{"start":{"line":53,"column":12},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":53,"column":13}},{"start":{"line":53,"column":20},"ann":"{VV : forall a b .\n      x1:a -> x2:b -> x3:(BST.BSTree {VV : a | VV < x1} b) -> x4:(BST.BSTree {VV : a | VV > x1} b) -> {v : (BST.BSTree a b) | tright v == x4\n                                                                                                                              && tleft v == x3\n                                                                                                                              && tval v == x2\n                                                                                                                              && tkey v == x1\n                                                                                                                              && size v == (1 + size x3) + size x4\n                                                                                                                              && height v == 1 + (if height x3 > height x4 then height x3 else height x4)\n                                                                                                                              && v == Node x1 x2 x3 x4} | VV == Node}","ident":"BST.Node","stop":{"line":53,"column":47}},{"start":{"line":53,"column":25},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":53,"column":26}},{"start":{"line":53,"column":27},"ann":"{VV : a | VV == v}","ident":"v","stop":{"line":53,"column":28}},{"start":{"line":53,"column":29},"ann":"{v : (BST.BSTree {VV : a | VV < k} b) | height v >= 0\n                                        && size v >= 0\n                                        && 0 <= size v\n                                        && 0 <= height v\n                                        && v == l}","ident":"l","stop":{"line":53,"column":30}},{"start":{"line":53,"column":31},"ann":"{v' : (BST.BSTree a b) | size v' == size r\n                         || size v' == size r + 1\n                         && v' == insert r k v}","ident":"lq_anf$##7205759403792805983","stop":{"line":53,"column":47}},{"start":{"line":53,"column":39},"ann":"{v : (BST.BSTree {VV : a | VV > k} b) | height v >= 0\n                                        && size v >= 0\n                                        && 0 <= size v\n                                        && 0 <= height v\n                                        && v == r}","ident":"r","stop":{"line":53,"column":40}},{"start":{"line":53,"column":41},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":53,"column":43}},{"start":{"line":53,"column":44},"ann":"{VV : a | VV == v}","ident":"v","stop":{"line":53,"column":46}},{"start":{"line":54,"column":20},"ann":"{VV : forall a b .\n      x1:a -> x2:b -> x3:(BST.BSTree {VV : a | VV < x1} b) -> x4:(BST.BSTree {VV : a | VV > x1} b) -> {v : (BST.BSTree a b) | tright v == x4\n                                                                                                                              && tleft v == x3\n                                                                                                                              && tval v == x2\n                                                                                                                              && tkey v == x1\n                                                                                                                              && size v == (1 + size x3) + size x4\n                                                                                                                              && height v == 1 + (if height x3 > height x4 then height x3 else height x4)\n                                                                                                                              && v == Node x1 x2 x3 x4} | VV == Node}","ident":"BST.Node","stop":{"line":54,"column":34}},{"start":{"line":54,"column":25},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":54,"column":27}},{"start":{"line":54,"column":28},"ann":"{VV : a | VV == v}","ident":"v","stop":{"line":54,"column":30}},{"start":{"line":54,"column":31},"ann":"{v : (BST.BSTree {VV : a | VV < k} b) | height v >= 0\n                                        && size v >= 0\n                                        && 0 <= size v\n                                        && 0 <= height v\n                                        && v == l}","ident":"l","stop":{"line":54,"column":32}},{"start":{"line":54,"column":33},"ann":"{v : (BST.BSTree {VV : a | VV > k} b) | height v >= 0\n                                        && size v >= 0\n                                        && 0 <= size v\n                                        && 0 <= height v\n                                        && v == r}","ident":"r","stop":{"line":54,"column":34}},{"start":{"line":59,"column":1},"ann":"forall a b .\n(GHC.Classes.Ord<[]> a) =>\n(BST.BSTree a b) -> a -> (Functions_Types.Maybe b)","ident":"BST.lookup","stop":{"line":59,"column":7}},{"start":{"line":59,"column":12},"ann":"a","ident":"k","stop":{"line":59,"column":13}},{"start":{"line":59,"column":19},"ann":"{VV : forall a .\n      {v : (Functions_Types.Maybe a) | (isJust v <=> false)\n                                       && v == Nothing} | VV == Nothing}","ident":"_","stop":{"line":59,"column":26}},{"start":{"line":61,"column":7},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":61,"column":9}},{"start":{"line":61,"column":12},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":61,"column":13}},{"start":{"line":61,"column":19},"ann":"forall a b .\n(GHC.Classes.Ord<[]> a) =>\n(BST.BSTree a b) -> a -> (Functions_Types.Maybe b)","ident":"BST.lookup","stop":{"line":61,"column":30}},{"start":{"line":61,"column":26},"ann":"{v : (BST.BSTree {VV : a | VV < k} b) | height v >= 0\n                                        && size v >= 0\n                                        && 0 <= size v\n                                        && 0 <= height v\n                                        && v == l}","ident":"l","stop":{"line":61,"column":27}},{"start":{"line":61,"column":28},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":61,"column":30}},{"start":{"line":62,"column":7},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":62,"column":9}},{"start":{"line":62,"column":12},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":62,"column":13}},{"start":{"line":62,"column":19},"ann":"forall a b .\n(GHC.Classes.Ord<[]> a) =>\n(BST.BSTree a b) -> a -> (Functions_Types.Maybe b)","ident":"BST.lookup","stop":{"line":62,"column":30}},{"start":{"line":62,"column":26},"ann":"{v : (BST.BSTree {VV : a | VV > k} b) | height v >= 0\n                                        && size v >= 0\n                                        && 0 <= size v\n                                        && 0 <= height v\n                                        && v == r}","ident":"r","stop":{"line":62,"column":27}},{"start":{"line":62,"column":28},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":62,"column":30}},{"start":{"line":63,"column":19},"ann":"{VV : forall a .\n      x1:a -> {v : (Functions_Types.Maybe a) | Just##lqdc##$select v == x1\n                                               && (isJust v <=> true)\n                                               && fromJust v == x1\n                                               && v == Just x1} | VV == Just}","ident":"Functions_Types.Just","stop":{"line":63,"column":25}},{"start":{"line":63,"column":24},"ann":"{VV : a | VV == v}","ident":"v","stop":{"line":63,"column":25}},{"start":{"line":69,"column":1},"ann":"forall a b .\n(GHC.Classes.Ord<[]> a) =>\nx2:(BST.BSTree a b) -> x3:a -> x4:b -> {VV : () | lookup (insert x2 x3 x4) x3 == Just x4}","ident":"BST.lem_lookup_eq","stop":{"line":69,"column":14}},{"start":{"line":69,"column":25},"ann":"{v : () | v == ()}","ident":"GHC.Tuple.()","stop":{"line":69,"column":27}},{"start":{"line":71,"column":7},"ann":"a","ident":"ds_d3aL","stop":{"line":71,"column":10}},{"start":{"line":71,"column":14},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":71,"column":15}},{"start":{"line":71,"column":25},"ann":"{v : () | v == ()}","ident":"GHC.Tuple.()","stop":{"line":71,"column":27}},{"start":{"line":72,"column":7},"ann":"a","ident":"ds_d3aL","stop":{"line":72,"column":10}},{"start":{"line":72,"column":14},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":72,"column":15}},{"start":{"line":72,"column":25},"ann":"forall a b .\n(GHC.Classes.Ord<[]> a) =>\nx2:(BST.BSTree a b) -> x3:a -> x4:b -> {VV : () | lookup (insert x2 x3 x4) x3 == Just x4}","ident":"BST.lem_lookup_eq","stop":{"line":72,"column":48}},{"start":{"line":72,"column":39},"ann":"{v : (BST.BSTree {VV : a | VV < k} b) | height v >= 0\n                                        && size v >= 0\n                                        && 0 <= size v\n                                        && 0 <= height v\n                                        && v == l}","ident":"l","stop":{"line":72,"column":40}},{"start":{"line":72,"column":41},"ann":"a","ident":"ds_d3aL","stop":{"line":72,"column":44}},{"start":{"line":72,"column":45},"ann":"a","ident":"ds_d3aM","stop":{"line":72,"column":48}},{"start":{"line":73,"column":25},"ann":"forall a b .\n(GHC.Classes.Ord<[]> a) =>\nx2:(BST.BSTree a b) -> x3:a -> x4:b -> {VV : () | lookup (insert x2 x3 x4) x3 == Just x4}","ident":"BST.lem_lookup_eq","stop":{"line":73,"column":48}},{"start":{"line":73,"column":39},"ann":"{v : (BST.BSTree {VV : a | VV > k} b) | height v >= 0\n                                        && size v >= 0\n                                        && 0 <= size v\n                                        && 0 <= height v\n                                        && v == r}","ident":"r","stop":{"line":73,"column":40}},{"start":{"line":73,"column":41},"ann":"a","ident":"ds_d3aL","stop":{"line":73,"column":44}},{"start":{"line":73,"column":45},"ann":"a","ident":"ds_d3aM","stop":{"line":73,"column":48}},{"start":{"line":79,"column":1},"ann":"forall a b .\n(GHC.Classes.Ord<[]> a) =>\nx2:(BST.BSTree a b) -> x3:a -> x4:{VV : a | VV /= x3} -> x5:b -> {VV : () | lookup (insert x2 x4 x5) x3 == lookup x2 x3}","ident":"BST.lem_lookup_neq","stop":{"line":79,"column":15}},{"start":{"line":79,"column":20},"ann":"a","ident":"k1","stop":{"line":79,"column":22}},{"start":{"line":79,"column":23},"ann":"{VV : a | VV /= k1}","ident":"k2","stop":{"line":79,"column":25}},{"start":{"line":80,"column":7},"ann":"{VV : a | VV == k1}","ident":"k1","stop":{"line":80,"column":9}},{"start":{"line":80,"column":12},"ann":"{VV : a | VV /= k1\n          && VV == k2}","ident":"k2","stop":{"line":80,"column":14}},{"start":{"line":80,"column":29},"ann":"{v : () | v == ()}","ident":"GHC.Tuple.()","stop":{"line":80,"column":31}},{"start":{"line":81,"column":29},"ann":"{v : () | v == ()}","ident":"GHC.Tuple.()","stop":{"line":81,"column":31}},{"start":{"line":83,"column":7},"ann":"{VV : a | VV == k1}","ident":"k1","stop":{"line":83,"column":9}},{"start":{"line":83,"column":13},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":83,"column":14}},{"start":{"line":83,"column":16},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":83,"column":17}},{"start":{"line":83,"column":21},"ann":"{VV : a | VV /= k1\n          && VV == k2}","ident":"k2","stop":{"line":83,"column":23}},{"start":{"line":83,"column":29},"ann":"{v : () | v == ()}","ident":"GHC.Tuple.()","stop":{"line":83,"column":31}},{"start":{"line":84,"column":7},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":84,"column":8}},{"start":{"line":84,"column":13},"ann":"{VV : a | VV /= k1\n          && VV == k2}","ident":"k2","stop":{"line":84,"column":15}},{"start":{"line":84,"column":29},"ann":"{v : () | v == ()}","ident":"GHC.Tuple.()","stop":{"line":84,"column":31}},{"start":{"line":85,"column":7},"ann":"{VV : a | VV == k1}","ident":"k1","stop":{"line":85,"column":9}},{"start":{"line":85,"column":13},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":85,"column":14}},{"start":{"line":85,"column":16},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":85,"column":17}},{"start":{"line":85,"column":21},"ann":"{VV : a | VV /= k1\n          && VV == k2}","ident":"k2","stop":{"line":85,"column":23}},{"start":{"line":85,"column":29},"ann":"{v : () | v == ()}","ident":"GHC.Tuple.()","stop":{"line":85,"column":31}},{"start":{"line":86,"column":7},"ann":"{VV : a | VV /= k1\n          && VV == k2}","ident":"k2","stop":{"line":86,"column":9}},{"start":{"line":86,"column":13},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":86,"column":14}},{"start":{"line":86,"column":16},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":86,"column":17}},{"start":{"line":86,"column":21},"ann":"{VV : a | VV == k1}","ident":"k1","stop":{"line":86,"column":23}},{"start":{"line":86,"column":29},"ann":"{v : () | v == ()}","ident":"GHC.Tuple.()","stop":{"line":86,"column":31}},{"start":{"line":87,"column":7},"ann":"{VV : a | VV /= k1\n          && VV == k2}","ident":"k2","stop":{"line":87,"column":9}},{"start":{"line":87,"column":13},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":87,"column":14}},{"start":{"line":87,"column":16},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":87,"column":17}},{"start":{"line":87,"column":21},"ann":"{VV : a | VV == k1}","ident":"k1","stop":{"line":87,"column":23}},{"start":{"line":87,"column":29},"ann":"{v : () | v == ()}","ident":"GHC.Tuple.()","stop":{"line":87,"column":31}},{"start":{"line":88,"column":7},"ann":"{VV : a | VV == k1}","ident":"k1","stop":{"line":88,"column":9}},{"start":{"line":88,"column":12},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":88,"column":13}},{"start":{"line":88,"column":15},"ann":"{VV : a | VV /= k1\n          && VV == k2}","ident":"k2","stop":{"line":88,"column":17}},{"start":{"line":88,"column":20},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":88,"column":21}},{"start":{"line":88,"column":29},"ann":"forall a b .\n(GHC.Classes.Ord<[]> a) =>\nx2:(BST.BSTree a b) -> x3:a -> x4:{VV : a | VV /= x3} -> x5:b -> {VV : () | lookup (insert x2 x4 x5) x3 == lookup x2 x3}","ident":"BST.lem_lookup_neq","stop":{"line":88,"column":54}},{"start":{"line":88,"column":44},"ann":"{v : (BST.BSTree {VV : a | VV < k} b) | height v >= 0\n                                        && size v >= 0\n                                        && 0 <= size v\n                                        && 0 <= height v\n                                        && v == l}","ident":"l","stop":{"line":88,"column":45}},{"start":{"line":88,"column":46},"ann":"{VV : a | VV == k1}","ident":"k1","stop":{"line":88,"column":48}},{"start":{"line":88,"column":49},"ann":"{VV : a | VV /= k1\n          && VV == k2}","ident":"k2","stop":{"line":88,"column":51}},{"start":{"line":88,"column":52},"ann":"a","ident":"ds_d2UV","stop":{"line":88,"column":54}},{"start":{"line":89,"column":7},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":89,"column":8}},{"start":{"line":89,"column":11},"ann":"{VV : a | VV == k1}","ident":"k1","stop":{"line":89,"column":13}},{"start":{"line":89,"column":15},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":89,"column":16}},{"start":{"line":89,"column":19},"ann":"{VV : a | VV /= k1\n          && VV == k2}","ident":"k2","stop":{"line":89,"column":21}},{"start":{"line":89,"column":29},"ann":"forall a b .\n(GHC.Classes.Ord<[]> a) =>\nx2:(BST.BSTree a b) -> x3:a -> x4:{VV : a | VV /= x3} -> x5:b -> {VV : () | lookup (insert x2 x4 x5) x3 == lookup x2 x3}","ident":"BST.lem_lookup_neq","stop":{"line":89,"column":54}},{"start":{"line":89,"column":44},"ann":"{v : (BST.BSTree {VV : a | VV > k} b) | height v >= 0\n                                        && size v >= 0\n                                        && 0 <= size v\n                                        && 0 <= height v\n                                        && v == r}","ident":"r","stop":{"line":89,"column":45}},{"start":{"line":89,"column":46},"ann":"{VV : a | VV == k1}","ident":"k1","stop":{"line":89,"column":48}},{"start":{"line":89,"column":49},"ann":"{VV : a | VV /= k1\n          && VV == k2}","ident":"k2","stop":{"line":89,"column":51}},{"start":{"line":89,"column":52},"ann":"a","ident":"ds_d2UV","stop":{"line":89,"column":54}},{"start":{"line":97,"column":1},"ann":"x1:() -> {VV : (BST.BSTree GHC.Types.Int [GHC.Types.Char]) | VV == exTree x1\n                                                             && VV == insert (insert (insert Nil 10 \"cat\") 20 \"dog\") 30 \"zebra\"}","ident":"BST.exTree","stop":{"line":97,"column":7}},{"start":{"line":97,"column":19},"ann":"(BST.BSTree GHC.Types.Int [GHC.Types.Char])","ident":"lq_anf$##7205759403792806401","stop":{"line":97,"column":58}},{"start":{"line":97,"column":27},"ann":"(BST.BSTree GHC.Types.Int [GHC.Types.Char])","ident":"lq_anf$##7205759403792806396","stop":{"line":97,"column":48}},{"start":{"line":97,"column":35},"ann":"{VV : forall a b .\n      {v : (BST.BSTree a b) | size v == 0\n                              && height v == 0\n                              && v == Nil} | VV == Nil}","ident":"_","stop":{"line":97,"column":38}},{"start":{"line":97,"column":39},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792806393","stop":{"line":97,"column":41}},{"start":{"line":97,"column":42},"ann":"[GHC.Types.Char]","ident":"lq_anf$##7205759403792806395","stop":{"line":97,"column":47}},{"start":{"line":97,"column":49},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792806398","stop":{"line":97,"column":51}},{"start":{"line":97,"column":52},"ann":"[GHC.Types.Char]","ident":"lq_anf$##7205759403792806400","stop":{"line":97,"column":57}},{"start":{"line":97,"column":59},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792806403","stop":{"line":97,"column":61}},{"start":{"line":97,"column":62},"ann":"[GHC.Types.Char]","ident":"lq_anf$##7205759403792806405","stop":{"line":97,"column":69}},{"start":{"line":101,"column":1},"ann":"() -> {VV : GHC.Types.Bool | VV}","ident":"BST.propOK","stop":{"line":101,"column":7}},{"start":{"line":101,"column":13},"ann":"(Functions_Types.Maybe [GHC.Types.Char])","ident":"lq_anf$##7205759403792806409","stop":{"line":101,"column":25}},{"start":{"line":101,"column":20},"ann":"{v : (BST.BSTree GHC.Types.Int [GHC.Types.Char]) | v == exTree ()\n                                                   && v == insert (insert (insert Nil 10 \"cat\") 20 \"dog\") 30 \"zebra\"\n                                                   && height v >= 0\n                                                   && size v >= 0\n                                                   && 0 <= size v\n                                                   && 0 <= height v\n                                                   && v == ex}","ident":"ex","stop":{"line":101,"column":22}},{"start":{"line":101,"column":23},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792806408","stop":{"line":101,"column":25}},{"start":{"line":101,"column":29},"ann":"{v : (Functions_Types.Maybe [GHC.Types.Char]) | isJust v <=> true}","ident":"lq_anf$##7205759403792806412","stop":{"line":101,"column":39}},{"start":{"line":101,"column":34},"ann":"[GHC.Types.Char]","ident":"lq_anf$##7205759403792806411","stop":{"line":101,"column":39}},{"start":{"line":102,"column":13},"ann":"(Functions_Types.Maybe [GHC.Types.Char])","ident":"lq_anf$##7205759403792806416","stop":{"line":102,"column":25}},{"start":{"line":102,"column":20},"ann":"{v : (BST.BSTree GHC.Types.Int [GHC.Types.Char]) | v == exTree ()\n                                                   && v == insert (insert (insert Nil 10 \"cat\") 20 \"dog\") 30 \"zebra\"\n                                                   && height v >= 0\n                                                   && size v >= 0\n                                                   && 0 <= size v\n                                                   && 0 <= height v\n                                                   && v == ex}","ident":"ex","stop":{"line":102,"column":22}},{"start":{"line":102,"column":23},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792806415","stop":{"line":102,"column":25}},{"start":{"line":102,"column":29},"ann":"{v : (Functions_Types.Maybe [GHC.Types.Char]) | isJust v <=> true}","ident":"lq_anf$##7205759403792806419","stop":{"line":102,"column":39}},{"start":{"line":102,"column":34},"ann":"[GHC.Types.Char]","ident":"lq_anf$##7205759403792806418","stop":{"line":102,"column":39}},{"start":{"line":103,"column":13},"ann":"(Functions_Types.Maybe [GHC.Types.Char])","ident":"lq_anf$##7205759403792806423","stop":{"line":103,"column":25}},{"start":{"line":103,"column":20},"ann":"{v : (BST.BSTree GHC.Types.Int [GHC.Types.Char]) | v == exTree ()\n                                                   && v == insert (insert (insert Nil 10 \"cat\") 20 \"dog\") 30 \"zebra\"\n                                                   && height v >= 0\n                                                   && size v >= 0\n                                                   && 0 <= size v\n                                                   && 0 <= height v\n                                                   && v == ex}","ident":"ex","stop":{"line":103,"column":22}},{"start":{"line":103,"column":23},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792806422","stop":{"line":103,"column":25}},{"start":{"line":103,"column":29},"ann":"{v : (Functions_Types.Maybe [GHC.Types.Char]) | isJust v <=> true}","ident":"lq_anf$##7205759403792806426","stop":{"line":103,"column":41}},{"start":{"line":103,"column":34},"ann":"[GHC.Types.Char]","ident":"lq_anf$##7205759403792806425","stop":{"line":103,"column":41}},{"start":{"line":104,"column":13},"ann":"(Functions_Types.Maybe [GHC.Types.Char])","ident":"lq_anf$##7205759403792806430","stop":{"line":104,"column":24}},{"start":{"line":104,"column":20},"ann":"{v : (BST.BSTree GHC.Types.Int [GHC.Types.Char]) | v == exTree ()\n                                                   && v == insert (insert (insert Nil 10 \"cat\") 20 \"dog\") 30 \"zebra\"\n                                                   && height v >= 0\n                                                   && size v >= 0\n                                                   && 0 <= size v\n                                                   && 0 <= height v\n                                                   && v == ex}","ident":"ex","stop":{"line":104,"column":22}},{"start":{"line":104,"column":23},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792806429","stop":{"line":104,"column":24}},{"start":{"line":104,"column":29},"ann":"{VV : forall a .\n      {v : (Functions_Types.Maybe a) | (isJust v <=> false)\n                                       && v == Nothing} | VV == Nothing}","ident":"_","stop":{"line":104,"column":36}},{"start":{"line":106,"column":5},"ann":"{v : (BST.BSTree GHC.Types.Int [GHC.Types.Char]) | v == exTree ()\n                                                   && v == insert (insert (insert Nil 10 \"cat\") 20 \"dog\") 30 \"zebra\"}","ident":"ex","stop":{"line":106,"column":7}},{"start":{"line":106,"column":13},"ann":"{v : (BST.BSTree GHC.Types.Int [GHC.Types.Char]) | v == exTree ()\n                                                   && v == insert (insert (insert Nil 10 \"cat\") 20 \"dog\") 30 \"zebra\"}","ident":"_","stop":{"line":106,"column":22}},{"start":{"line":106,"column":20},"ann":"{v : () | v == ()}","ident":"GHC.Tuple.()","stop":{"line":106,"column":22}}],"errors":[]}