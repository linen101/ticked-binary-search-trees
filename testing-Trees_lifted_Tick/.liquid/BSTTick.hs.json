{"status":"unsafe","types":{"84":{"7":{"ann":"{VV : a | VV == k}","ident":"k","row":84,"col":7},"78":{"ann":"{v : (BSTTick.Tree a b) | height v >= 0\n                          && 0 <= height v\n                          && size v >= 0\n                          && 0 <= size v\n                          && v == r'}","ident":"r'","row":84,"col":78},"28":{"ann":"GHC.Types.Int","ident":"n","row":84,"col":28},"49":{"ann":"{VV : a | VV == k}","ident":"k","row":84,"col":49},"72":{"ann":"{VV : a | VV == k}","ident":"k","row":84,"col":72},"19":{"ann":"{VV : forall a .\n      x1:GHC.Types.Int -> x2:a -> {v : (Language.Haskell.Liquid.RTick.Tick a) | tval v == x2\n                                                                                && tcost v == x1\n                                                                                && v == Tick x1 x2} | VV == Tick}","ident":"Language.Haskell.Liquid.RTick.Tick","row":84,"col":19},"66":{"ann":"{v' : (BSTTick.Tree a b) | tr v' == r'\n                           && tl v' == l\n                           && val v' == v\n                           && key v' == k\n                           && size v' == (1 + size l) + size r'\n                           && height v' == 1 + (if height l > height r' then height l else height r')\n                           && v' == Node k v l r'}","ident":"lq_anf$##7205759403792805429","row":84,"col":66},"74":{"ann":"{VV : a | VV == v}","ident":"v","row":84,"col":74},"12":{"ann":"{VV : a | VV == k}","ident":"k","row":84,"col":12},"30":{"ann":"(BSTTick.Tree a b)","ident":"r'","row":84,"col":30},"35":{"ann":"(Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree a b))","ident":"_","row":84,"col":35},"40":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805427","row":84,"col":40},"52":{"ann":"{VV : a | VV == v}","ident":"v","row":84,"col":52},"64":{"ann":"{v : GHC.Types.Int | v == n}","ident":"n","row":84,"col":64},"47":{"ann":"{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV > k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == r}","ident":"r","row":84,"col":47},"42":{"ann":"{v' : (Language.Haskell.Liquid.RTick.Tick {v : (BSTTick.Tree <\\x6 VV -> {VV : a | VV < x6}, \\x6 VV -> {VV : a | VV > x6}> a b) | size v == size r + 1\n                                                                                                                                 || size v == size r}) | tcost v' <= height r\n                                                                                                                                                         && v' == set r k v}","ident":"lq_anf$##7205759403792805428","row":84,"col":42},"76":{"ann":"{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV < k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == l}","ident":"l","row":84,"col":76}},"37":{"36":{"ann":"{v : GHC.Types.Int | v == size r\n                     && v >= 0}","ident":"lq_anf$##7205759403792805387","row":37,"col":36},"23":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805384","row":37,"col":23},"27":{"ann":"{v : GHC.Types.Int | v == size l\n                     && v >= 0}","ident":"lq_anf$##7205759403792805385","row":37,"col":27},"41":{"ann":"{v : (BSTTick.Tree a b) | height v >= 0\n                          && 0 <= height v\n                          && 0 <= size v\n                          && v == r}","ident":"r","row":37,"col":41},"32":{"ann":"{v : (BSTTick.Tree a b) | height v >= 0\n                          && 0 <= height v\n                          && 0 <= size v\n                          && v == l}","ident":"l","row":37,"col":32}},"106":{"17":{"ann":"a","ident":"k","row":106,"col":17},"1":{"ann":"forall a b .\n(GHC.Classes.Ord<[]> a) =>\nx2:(BSTTick.Tree <\\x2 VV -> {VV : a | VV < x2}, \\x2 VV -> {VV : a | VV > x2}> a b) -> x3:a -> {VV : () | tcost (get x2 x3) <= height x2}","ident":"BSTTick.getCost","row":106,"col":1},"9":{"ann":"(BSTTick.Tree <\\x2 VV -> {VV : a | VV < x2}, \\x2 VV -> {VV : a | VV > x2}> a b)","ident":"b","row":106,"col":9}},"43":{"25":{"ann":"{v : GHC.Prim.Int# | v == 0}","ident":"lq_anf$##7205759403792805435","row":43,"col":25},"1":{"ann":"forall a b .\nx1:(BSTTick.Tree a b) -> {VV : GHC.Types.Int | VV == height x1\n                                               && VV >= 0}","ident":"BSTTick.height","row":43,"col":1}},"112":{"8":{"ann":"{v : Language.Haskell.Liquid.ProofCombinators.QED | v == QED}","ident":"Language.Haskell.Liquid.ProofCombinators.QED","row":112,"col":8}},"75":{"28":{"ann":"{VV : a | VV == k}","ident":"k","row":75,"col":28},"31":{"ann":"{VV : a | VV == v}","ident":"v","row":75,"col":31},"14":{"ann":"(Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree a b))","ident":"_","row":75,"col":14},"19":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805390","row":75,"col":19},"26":{"ann":"{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV > k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == r}","ident":"r","row":75,"col":26},"21":{"ann":"{v' : (Language.Haskell.Liquid.RTick.Tick {v : (BSTTick.Tree <\\x6 VV -> {VV : a | VV < x6}, \\x6 VV -> {VV : a | VV > x6}> a b) | size v == size r + 1\n                                                                                                                                 || size v == size r}) | tcost v' <= height r\n                                                                                                                                                         && v' == set r k v}","ident":"lq_anf$##7205759403792805391","row":75,"col":21},"9":{"ann":"(Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree a b))","ident":"r'","row":75,"col":9}},"36":{"1":{"ann":"forall a b .\nx1:(BSTTick.Tree a b) -> {VV : GHC.Types.Int | VV == size x1\n                                               && VV >= 0}","ident":"BSTTick.size","row":36,"col":1},"23":{"ann":"{v : GHC.Prim.Int# | v == 0}","ident":"lq_anf$##7205759403792805382","row":36,"col":23}},"137":{"48":{"ann":"{v : GHC.Types.Int | v == height tree2\n                     && v >= 0}","ident":"lq_anf$##7205759403792805546","row":137,"col":48},"12":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805545","row":137,"col":12},"30":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805541","row":137,"col":30},"1":{"ann":"() -> {VV : GHC.Types.Bool | VV}","ident":"BSTTick.test2","row":137,"col":1},"18":{"ann":"{v : (Language.Haskell.Liquid.RTick.Tick {v : (BSTTick.Tree <\\x12 VV -> {v : GHC.Types.Int | v < v}, \\x12 VV -> {v : GHC.Types.Int | v > v}> GHC.Types.Int [GHC.Types.Char]) | size v == size tree2 + 1\n                                                                                                                                                                               || size v == size tree2}) | tcost v <= height tree2}","ident":"lq_anf$##7205759403792805544","row":137,"col":18},"55":{"ann":"{v : (BSTTick.Tree <\\x10 VV -> {v : GHC.Types.Int | v < v}, \\x10 VV -> {v : GHC.Types.Int | v > v}> GHC.Types.Int [GHC.Types.Char]) | v == tree2\n                                                                                                                                      && v == tval (set' (tval (set' (tval (set' Nil 5 \"siamese\")) 18 \"bobtail\")) 3 \"sphinx\")\n                                                                                                                                      && height v >= 0\n                                                                                                                                      && 0 <= height v\n                                                                                                                                      && size v >= 0\n                                                                                                                                      && 0 <= size v}","ident":"BSTTick.tree2","row":137,"col":55},"33":{"ann":"[GHC.Types.Char]","ident":"lq_anf$##7205759403792805543","row":137,"col":33},"24":{"ann":"{v : (BSTTick.Tree <\\x10 VV -> {v : GHC.Types.Int | v < v}, \\x10 VV -> {v : GHC.Types.Int | v > v}> GHC.Types.Int [GHC.Types.Char]) | v == tree2\n                                                                                                                                      && v == tval (set' (tval (set' (tval (set' Nil 5 \"siamese\")) 18 \"bobtail\")) 3 \"sphinx\")\n                                                                                                                                      && height v >= 0\n                                                                                                                                      && 0 <= height v\n                                                                                                                                      && size v >= 0\n                                                                                                                                      && 0 <= size v}","ident":"BSTTick.tree2","row":137,"col":24}},"85":{"37":{"ann":"{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV > k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == r}","ident":"r","row":85,"col":37},"19":{"ann":"{VV : forall a .\n      x1:a -> {v : (Language.Haskell.Liquid.RTick.Tick a) | x1 == tval v\n                                                            && 1 == tcost v\n                                                            && v == wait x1\n                                                            && v == Tick 1 x1} | VV == wait}","ident":"Language.Haskell.Liquid.RTick.wait","row":85,"col":19},"30":{"ann":"{VV : a | VV == k}","ident":"k","row":85,"col":30},"35":{"ann":"{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV < k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == l}","ident":"l","row":85,"col":35},"24":{"ann":"{v' : (BSTTick.Tree a b) | tr v' == r\n                           && tl v' == l\n                           && val v' == v\n                           && key v' == k\n                           && size v' == (1 + size l) + size r\n                           && height v' == 1 + (if height l > height r then height l else height r)\n                           && v' == Node k v l r}","ident":"lq_anf$##7205759403792805425","row":85,"col":24},"32":{"ann":"{VV : a | VV == v}","ident":"v","row":85,"col":32}},"72":{"25":{"ann":"{v' : (BSTTick.Tree a b) | tr v' == r\n                           && tl v' == l\n                           && val v' == v\n                           && key v' == k\n                           && size v' == (1 + size l) + size r\n                           && height v' == 1 + (if height l > height r then height l else height r)\n                           && v' == Node k v l r}","ident":"lq_anf$##7205759403792805399","row":72,"col":25},"31":{"ann":"{VV : a | VV == k}","ident":"k","row":72,"col":31},"36":{"ann":"{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV < k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == l}","ident":"l","row":72,"col":36},"20":{"ann":"{VV : forall a .\n      x1:a -> {v : (Language.Haskell.Liquid.RTick.Tick a) | x1 == tval v\n                                                            && 1 == tcost v\n                                                            && v == wait x1\n                                                            && v == Tick 1 x1} | VV == wait}","ident":"Language.Haskell.Liquid.RTick.wait","row":72,"col":20},"33":{"ann":"{VV : a | VV == v}","ident":"v","row":72,"col":33},"38":{"ann":"{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV > k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == r}","ident":"r","row":72,"col":38}},"44":{"25":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805437","row":44,"col":25},"44":{"ann":"{v : GHC.Types.Int | v == height r\n                     && v >= 0}","ident":"lq_anf$##7205759403792805439","row":44,"col":44},"29":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805440","row":44,"col":29},"52":{"ann":"{v : (BSTTick.Tree a b) | 0 <= height v\n                          && size v >= 0\n                          && 0 <= size v\n                          && v == r}","ident":"r","row":44,"col":52},"41":{"ann":"{v : (BSTTick.Tree a b) | 0 <= height v\n                          && size v >= 0\n                          && 0 <= size v\n                          && v == l}","ident":"l","row":44,"col":41},"33":{"ann":"{v : GHC.Types.Int | v == height l\n                     && v >= 0}","ident":"lq_anf$##7205759403792805438","row":44,"col":33}},"66":{"7":{"ann":"{VV : a | VV == k}","ident":"k","row":66,"col":7},"12":{"ann":"{VV : a | VV == k}","ident":"k","row":66,"col":12},"30":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805412","row":66,"col":30},"26":{"ann":"{v : (Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree a b)) | v == l'}","ident":"l'","row":66,"col":26},"20":{"ann":"{v : GHC.Types.Int | v == tcost l'}","ident":"lq_anf$##7205759403792805410","row":66,"col":20}},"91":{"1":{"ann":"forall a b .\n(GHC.Classes.Ord<[]> a) =>\nx2:(BSTTick.Tree <\\x2 VV -> {VV : a | VV < x2}, \\x2 VV -> {VV : a | VV > x2}> a b) -> a -> {t : (Language.Haskell.Liquid.RTick.Tick (Functions_Types.Maybe b)) | tcost t <= height x2}","ident":"BSTTick.get","row":91,"col":1},"16":{"ann":"{v : (Functions_Types.Maybe a) | (isJust v <=> false)\n                                 && v == Nothing}","ident":"lq_anf$##7205759403792805343","row":91,"col":16},"21":{"ann":"{VV : forall a .\n      {v : (Functions_Types.Maybe a) | (isJust v <=> false)\n                                       && v == Nothing} | VV == Nothing}","ident":"_","row":91,"col":21}},"83":{"7":{"ann":"{VV : a | VV == k}","ident":"k","row":83,"col":7},"28":{"ann":"GHC.Types.Int","ident":"n","row":83,"col":28},"49":{"ann":"{VV : a | VV == k}","ident":"k","row":83,"col":49},"72":{"ann":"{VV : a | VV == k}","ident":"k","row":83,"col":72},"19":{"ann":"{VV : forall a .\n      x1:GHC.Types.Int -> x2:a -> {v : (Language.Haskell.Liquid.RTick.Tick a) | tval v == x2\n                                                                                && tcost v == x1\n                                                                                && v == Tick x1 x2} | VV == Tick}","ident":"Language.Haskell.Liquid.RTick.Tick","row":83,"col":19},"66":{"ann":"{v' : (BSTTick.Tree a b) | tr v' == r\n                           && tl v' == l'\n                           && val v' == v\n                           && key v' == k\n                           && size v' == (1 + size l') + size r\n                           && height v' == 1 + (if height l' > height r then height l' else height r)\n                           && v' == Node k v l' r}","ident":"lq_anf$##7205759403792805433","row":83,"col":66},"74":{"ann":"{VV : a | VV == v}","ident":"v","row":83,"col":74},"12":{"ann":"{VV : a | VV == k}","ident":"k","row":83,"col":12},"30":{"ann":"(BSTTick.Tree a b)","ident":"l'","row":83,"col":30},"35":{"ann":"(Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree a b))","ident":"_","row":83,"col":35},"40":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805431","row":83,"col":40},"52":{"ann":"{VV : a | VV == v}","ident":"v","row":83,"col":52},"64":{"ann":"{v : GHC.Types.Int | v == n}","ident":"n","row":83,"col":64},"47":{"ann":"{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV < k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == l}","ident":"l","row":83,"col":47},"79":{"ann":"{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV > k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == r}","ident":"r","row":83,"col":79},"42":{"ann":"{v' : (Language.Haskell.Liquid.RTick.Tick {v : (BSTTick.Tree <\\x6 VV -> {VV : a | VV < x6}, \\x6 VV -> {VV : a | VV > x6}> a b) | size v == size l + 1\n                                                                                                                                 || size v == size l}) | tcost v' <= height l\n                                                                                                                                                         && v' == set l k v}","ident":"lq_anf$##7205759403792805432","row":83,"col":42},"76":{"ann":"{v : (BSTTick.Tree a b) | height v >= 0\n                          && 0 <= height v\n                          && size v >= 0\n                          && 0 <= size v\n                          && v == l'}","ident":"l'","row":83,"col":76}},"74":{"28":{"ann":"{VV : a | VV == k}","ident":"k","row":74,"col":28},"31":{"ann":"{VV : a | VV == v}","ident":"v","row":74,"col":31},"14":{"ann":"(Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree a b))","ident":"_","row":74,"col":14},"19":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805393","row":74,"col":19},"26":{"ann":"{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV < k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == l}","ident":"l","row":74,"col":26},"21":{"ann":"{v' : (Language.Haskell.Liquid.RTick.Tick {v : (BSTTick.Tree <\\x6 VV -> {VV : a | VV < x6}, \\x6 VV -> {VV : a | VV > x6}> a b) | size v == size l + 1\n                                                                                                                                 || size v == size l}) | tcost v' <= height l\n                                                                                                                                                         && v' == set l k v}","ident":"lq_anf$##7205759403792805394","row":74,"col":21},"9":{"ann":"(Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree a b))","ident":"l'","row":74,"col":9}},"53":{"14":{"ann":"{VV : forall a b <r :: a a -> Bool, l :: a a -> Bool>.\n      {v : (BSTTick.Tree <\\x4 VV -> {VV : a<l x4> | true}, \\x4 VV -> {VV : a<r x4> | true}> a b) | size v == 0\n                                                                                                   && height v == 0\n                                                                                                   && v == Nil} | VV == Nil}","ident":"_","row":53,"col":14},"1":{"ann":"forall a b .\n{t : (Language.Haskell.Liquid.RTick.Tick {VV : (BSTTick.Tree <\\x2 VV -> {VV : a | VV < x2}, \\x2 VV -> {VV : a | VV > x2}> a b) | size VV == 0}) | tcost t == 0}","ident":"BSTTick.empty","row":53,"col":1}},"71":{"37":{"ann":"{VV : a | VV == k}","ident":"k","row":71,"col":37},"43":{"ann":"{v : (BSTTick.Tree a b) | v == tval r'}","ident":"lq_anf$##7205759403792805405","row":71,"col":43},"31":{"ann":"{v' : (BSTTick.Tree a b) | tl v' == l\n                           && val v' == v\n                           && key v' == k}","ident":"lq_anf$##7205759403792805406","row":71,"col":31},"49":{"ann":"{v : (Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree a b)) | v == r'}","ident":"r'","row":71,"col":49},"26":{"ann":"{VV : forall a .\n      x1:a -> {v : (Language.Haskell.Liquid.RTick.Tick a) | x1 == tval v\n                                                            && 1 == tcost v\n                                                            && v == wait x1\n                                                            && v == Tick 1 x1} | VV == wait}","ident":"Language.Haskell.Liquid.RTick.wait","row":71,"col":26},"39":{"ann":"{VV : a | VV == v}","ident":"v","row":71,"col":39},"41":{"ann":"{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV < k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == l}","ident":"l","row":71,"col":41}},"68":{"51":{"ann":"{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV > k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == r}","ident":"r","row":68,"col":51},"37":{"ann":"{VV : a | VV == k}","ident":"k","row":68,"col":37},"31":{"ann":"{v' : (BSTTick.Tree a b) | tr v' == r\n                           && val v' == v\n                           && key v' == k}","ident":"lq_anf$##7205759403792805416","row":68,"col":31},"26":{"ann":"{VV : forall a .\n      x1:a -> {v : (Language.Haskell.Liquid.RTick.Tick a) | x1 == tval v\n                                                            && 1 == tcost v\n                                                            && v == wait x1\n                                                            && v == Tick 1 x1} | VV == wait}","ident":"Language.Haskell.Liquid.RTick.wait","row":68,"col":26},"39":{"ann":"{VV : a | VV == v}","ident":"v","row":68,"col":39},"41":{"ann":"{v : (BSTTick.Tree a b) | v == tval l'}","ident":"lq_anf$##7205759403792805415","row":68,"col":41},"47":{"ann":"{v : (Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree a b)) | v == l'}","ident":"l'","row":68,"col":47}},"67":{"50":{"ann":"{VV : a | VV == k}","ident":"k","row":67,"col":50},"44":{"ann":"{v' : (BSTTick.Tree a b) | tr v' == r\n                           && val v' == v\n                           && key v' == k}","ident":"lq_anf$##7205759403792805419","row":67,"col":44},"26":{"ann":"{VV : forall a .\n      x1:{v : GHC.Types.Int | v >= 0} -> x2:a -> {v : (Language.Haskell.Liquid.RTick.Tick a) | x2 == tval v\n                                                                                               && x1 == tcost v\n                                                                                               && v == waitN x1 x2\n                                                                                               && v == Tick x1 x2} | VV == waitN}","ident":"Language.Haskell.Liquid.RTick.waitN","row":67,"col":26},"52":{"ann":"{VV : a | VV == v}","ident":"v","row":67,"col":52},"39":{"ann":"{v : (Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree a b)) | v == l'}","ident":"l'","row":67,"col":39},"64":{"ann":"{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV > k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == r}","ident":"r","row":67,"col":64},"60":{"ann":"{v : (Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree a b)) | v == l'}","ident":"l'","row":67,"col":60},"54":{"ann":"{v : (BSTTick.Tree a b) | v == tval l'}","ident":"lq_anf$##7205759403792805418","row":67,"col":54},"32":{"ann":"{v : GHC.Types.Int | v == tcost l'}","ident":"lq_anf$##7205759403792805417","row":67,"col":32}},"1":{"1":{"ann":"GHC.Types.Module","ident":"BSTTick.$trModule","row":1,"col":1}},"95":{"19":{"ann":"{VV : forall a .\n      x1:a -> {v : (Language.Haskell.Liquid.RTick.Tick a) | x1 == tval v\n                                                            && 0 == tcost v\n                                                            && v == pure x1\n                                                            && v == Tick 0 x1} | VV == pure}","ident":"Language.Haskell.Liquid.RTick.pure","row":95,"col":19},"30":{"ann":"{VV : a | VV == v}","ident":"v","row":95,"col":30},"24":{"ann":"{v' : (Functions_Types.Maybe a) | Just##lqdc##$select v' == v\n                                  && (isJust v' <=> true)\n                                  && fromJust v' == v\n                                  && v' == Just v}","ident":"lq_anf$##7205759403792805348","row":95,"col":24}},"70":{"50":{"ann":"{VV : a | VV == k}","ident":"k","row":70,"col":50},"44":{"ann":"{v' : (BSTTick.Tree a b) | tl v' == l\n                           && val v' == v\n                           && key v' == k}","ident":"lq_anf$##7205759403792805409","row":70,"col":44},"56":{"ann":"{v : (BSTTick.Tree a b) | v == tval r'}","ident":"lq_anf$##7205759403792805408","row":70,"col":56},"40":{"ann":"{v : (Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree a b)) | v == r'}","ident":"r'","row":70,"col":40},"62":{"ann":"{v : (Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree a b)) | v == r'}","ident":"r'","row":70,"col":62},"26":{"ann":"{VV : forall a .\n      x1:{v : GHC.Types.Int | v >= 0} -> x2:a -> {v : (Language.Haskell.Liquid.RTick.Tick a) | x2 == tval v\n                                                                                               && x1 == tcost v\n                                                                                               && v == waitN x1 x2\n                                                                                               && v == Tick x1 x2} | VV == waitN}","ident":"Language.Haskell.Liquid.RTick.waitN","row":70,"col":26},"52":{"ann":"{VV : a | VV == v}","ident":"v","row":70,"col":52},"33":{"ann":"{v : GHC.Types.Int | v == tcost r'}","ident":"lq_anf$##7205759403792805407","row":70,"col":33},"54":{"ann":"{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV < k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == l}","ident":"l","row":70,"col":54}},"69":{"7":{"ann":"{VV : a | VV == k}","ident":"k","row":69,"col":7},"12":{"ann":"{VV : a | VV == k}","ident":"k","row":69,"col":12},"30":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805402","row":69,"col":30},"26":{"ann":"{v : (Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree a b)) | v == r'}","ident":"r'","row":69,"col":26},"20":{"ann":"{v : GHC.Types.Int | v == tcost r'}","ident":"lq_anf$##7205759403792805400","row":69,"col":20}},"64":{"29":{"ann":"{VV : a | VV == v}","ident":"v","row":64,"col":29},"17":{"ann":"{v : (GHC.Classes.Ord a) | v == $dOrd_a23a}","ident":"$dOrd_a23a","row":64,"col":17},"1":{"ann":"forall a b .\n(GHC.Classes.Ord<[]> a) =>\nx2:(BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> a b) -> a -> b -> {t : (Language.Haskell.Liquid.RTick.Tick {VV : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> a b) | size VV == size x2 + 1\n                                                                                                                                                                                                                                 || size VV == size x2}) | tcost t <= height x2}","ident":"BSTTick.set","row":64,"col":1},"27":{"ann":"{VV : a | VV == k}","ident":"k","row":64,"col":27},"11":{"ann":"a","ident":"v","row":64,"col":11},"9":{"ann":"a","ident":"k","row":64,"col":9}},"93":{"7":{"ann":"a","ident":"ds_d2Zn","row":93,"col":7},"25":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805353","row":93,"col":25},"13":{"ann":"{VV : a | VV == k}","ident":"k","row":93,"col":13},"34":{"ann":"a","ident":"ds_d2Zn","row":93,"col":34},"20":{"ann":"{VV : forall a .\n      x1:GHC.Types.Int -> x2:(Language.Haskell.Liquid.RTick.Tick a) -> {v : (Language.Haskell.Liquid.RTick.Tick a) | tval x2 == tval v\n                                                                                                                     && x1 + tcost x2 == tcost v\n                                                                                                                     && v == step x1 x2\n                                                                                                                     && v == Tick (x1 + tcost x2) (tval x2)} | VV == step}","ident":"Language.Haskell.Liquid.RTick.step","row":93,"col":20},"27":{"ann":"{v : (Language.Haskell.Liquid.RTick.Tick (Functions_Types.Maybe a)) | tcost v <= height l}","ident":"lq_anf$##7205759403792805354","row":93,"col":27},"32":{"ann":"{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV < k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == l}","ident":"l","row":93,"col":32}},"94":{"7":{"ann":"a","ident":"ds_d2Zn","row":94,"col":7},"25":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805350","row":94,"col":25},"13":{"ann":"{VV : a | VV == k}","ident":"k","row":94,"col":13},"34":{"ann":"a","ident":"ds_d2Zn","row":94,"col":34},"20":{"ann":"{VV : forall a .\n      x1:GHC.Types.Int -> x2:(Language.Haskell.Liquid.RTick.Tick a) -> {v : (Language.Haskell.Liquid.RTick.Tick a) | tval x2 == tval v\n                                                                                                                     && x1 + tcost x2 == tcost v\n                                                                                                                     && v == step x1 x2\n                                                                                                                     && v == Tick (x1 + tcost x2) (tval x2)} | VV == step}","ident":"Language.Haskell.Liquid.RTick.step","row":94,"col":20},"27":{"ann":"{v : (Language.Haskell.Liquid.RTick.Tick (Functions_Types.Maybe a)) | tcost v <= height r}","ident":"lq_anf$##7205759403792805351","row":94,"col":27},"32":{"ann":"{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV > k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == r}","ident":"r","row":94,"col":32}},"126":{"43":{"ann":"{v : (BSTTick.Tree <\\x10 VV -> {v : GHC.Types.Int | v < v}, \\x10 VV -> {v : GHC.Types.Int | v > v}> GHC.Types.Int [GHC.Types.Char]) | v == tree1\n                                                                                                                                      && v == tval (set (tval (set (tval (set Nil 10 \"cat\")) 20 \"dog\")) 30 \"zebra\")\n                                                                                                                                      && height v >= 0\n                                                                                                                                      && 0 <= height v\n                                                                                                                                      && size v >= 0\n                                                                                                                                      && 0 <= size v}","ident":"BSTTick.tree1","row":126,"col":43},"36":{"ann":"{v : GHC.Types.Int | v == height tree1\n                     && v >= 0}","ident":"lq_anf$##7205759403792805538","row":126,"col":36},"29":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805535","row":126,"col":29},"12":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805537","row":126,"col":12},"1":{"ann":"() -> {VV : GHC.Types.Bool | VV}","ident":"BSTTick.test","row":126,"col":1},"23":{"ann":"{v : (BSTTick.Tree <\\x10 VV -> {v : GHC.Types.Int | v < v}, \\x10 VV -> {v : GHC.Types.Int | v > v}> GHC.Types.Int [GHC.Types.Char]) | v == tree1\n                                                                                                                                      && v == tval (set (tval (set (tval (set Nil 10 \"cat\")) 20 \"dog\")) 30 \"zebra\")\n                                                                                                                                      && height v >= 0\n                                                                                                                                      && 0 <= height v\n                                                                                                                                      && size v >= 0\n                                                                                                                                      && 0 <= size v}","ident":"BSTTick.tree1","row":126,"col":23},"18":{"ann":"{v : (Language.Haskell.Liquid.RTick.Tick (Functions_Types.Maybe [GHC.Types.Char])) | tcost v <= height tree1}","ident":"lq_anf$##7205759403792805536","row":126,"col":18}},"58":{"28":{"ann":"{VV : a | VV == k}","ident":"k","row":58,"col":28},"13":{"ann":"a","ident":"v","row":58,"col":13},"36":{"ann":"{VV : forall a b <r :: a a -> Bool, l :: a a -> Bool>.\n      {v : (BSTTick.Tree <\\x4 VV -> {VV : a<l x4> | true}, \\x4 VV -> {VV : a<r x4> | true}> a b) | size v == 0\n                                                                                                   && height v == 0\n                                                                                                   && v == Nil} | VV == Nil}","ident":"_","row":58,"col":36},"22":{"ann":"{v' : (BSTTick.Tree a b) | val v' == v\n                           && key v' == k}","ident":"lq_anf$##7205759403792805341","row":58,"col":22},"30":{"ann":"{VV : a | VV == v}","ident":"v","row":58,"col":30},"1":{"ann":"forall a b .\n(GHC.Classes.Ord<[]> a) =>\na -> b -> {t : (Language.Haskell.Liquid.RTick.Tick {VV : (BSTTick.Tree <\\x2 VV -> {VV : a | VV < x2}, \\x2 VV -> {VV : a | VV > x2}> a b) | size VV == 1}) | tcost t == 0}","ident":"BSTTick.singleton","row":58,"col":1},"11":{"ann":"a","ident":"k","row":58,"col":11},"32":{"ann":"{VV : forall a b <r :: a a -> Bool, l :: a a -> Bool>.\n      {v : (BSTTick.Tree <\\x4 VV -> {VV : a<l x4> | true}, \\x4 VV -> {VV : a<r x4> | true}> a b) | size v == 0\n                                                                                                   && height v == 0\n                                                                                                   && v == Nil} | VV == Nil}","ident":"_","row":58,"col":32}},"109":{"14":{"ann":"(Language.Haskell.Liquid.RTick.Tick (Functions_Types.Maybe (GHC.Types.Any (TYPE 'GHC.Types.LiftedRep))))","ident":"lq_anf$##7205759403792805452","row":109,"col":14},"22":{"ann":"{VV : forall a .\n      {v : (Functions_Types.Maybe a) | (isJust v <=> false)\n                                       && v == Nothing} | VV == Nothing}","ident":"_","row":109,"col":22},"20":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805450","row":109,"col":20},"8":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805453","row":109,"col":8}},"110":{"8":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805456","row":110,"col":8}},"120":{"43":{"ann":"{VV : forall a b <r :: a a -> Bool, l :: a a -> Bool>.\n      {v : (BSTTick.Tree <\\x4 VV -> {VV : a<l x4> | true}, \\x4 VV -> {VV : a<r x4> | true}> a b) | size v == 0\n                                                                                                   && height v == 0\n                                                                                                   && v == Nil} | VV == Nil}","ident":"_","row":120,"col":43},"14":{"ann":"(Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree <\\x10 VV -> {v : GHC.Types.Int | v < v}, \\x10 VV -> {v : GHC.Types.Int | v > v}> GHC.Types.Int [GHC.Types.Char]))","ident":"lq_anf$##7205759403792805514","row":120,"col":14},"50":{"ann":"[GHC.Types.Char]","ident":"lq_anf$##7205759403792805501","row":120,"col":50},"74":{"ann":"[GHC.Types.Char]","ident":"lq_anf$##7205759403792805513","row":120,"col":74},"71":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805511","row":120,"col":71},"1":{"ann":"(BSTTick.Tree <\\x2 VV -> {VV : GHC.Types.Int | VV < x2}, \\x2 VV -> {VV : GHC.Types.Int | VV > x2}> GHC.Types.Int [GHC.Types.Char])","ident":"BSTTick.tree1","row":120,"col":1},"62":{"ann":"[GHC.Types.Char]","ident":"lq_anf$##7205759403792805507","row":120,"col":62},"59":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805505","row":120,"col":59},"20":{"ann":"(BSTTick.Tree GHC.Types.Int [GHC.Types.Char])","ident":"lq_anf$##7205759403792805509","row":120,"col":20},"27":{"ann":"(Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree <\\x10 VV -> {v : GHC.Types.Int | v < v}, \\x10 VV -> {v : GHC.Types.Int | v > v}> GHC.Types.Int [GHC.Types.Char]))","ident":"lq_anf$##7205759403792805508","row":120,"col":27},"38":{"ann":"(Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree <\\x10 VV -> {v : GHC.Types.Int | v < v}, \\x10 VV -> {v : GHC.Types.Int | v > v}> GHC.Types.Int [GHC.Types.Char]))","ident":"lq_anf$##7205759403792805502","row":120,"col":38},"47":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805499","row":120,"col":47},"32":{"ann":"(BSTTick.Tree GHC.Types.Int [GHC.Types.Char])","ident":"lq_anf$##7205759403792805503","row":120,"col":32}},"107":{"19":{"ann":"{VV : a | VV == k}","ident":"k","row":107,"col":19},"12":{"ann":"(Language.Haskell.Liquid.RTick.Tick (Functions_Types.Maybe a))","ident":"lq_anf$##7205759403792805443","row":107,"col":12},"17":{"ann":"{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> a b) | height v >= 0\n                                                                                       && 0 <= height v\n                                                                                       && size v >= 0\n                                                                                       && 0 <= size v\n                                                                                       && v == b\n                                                                                       && size v == 0\n                                                                                       && height v == 0\n                                                                                       && v == Nil}","ident":"lq_anf$##7205759403792805441","row":107,"col":17},"6":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805444","row":107,"col":6}},"111":{"15":{"ann":"{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> a b) | height v >= 0\n                                                                                       && 0 <= height v\n                                                                                       && size v >= 0\n                                                                                       && 0 <= size v\n                                                                                       && v == b\n                                                                                       && size v == 0\n                                                                                       && height v == 0\n                                                                                       && v == Nil}","ident":"lq_anf$##7205759403792805441","row":111,"col":15},"8":{"ann":"{v : GHC.Types.Int | v >= 0}","ident":"lq_anf$##7205759403792805458","row":111,"col":8}},"133":{"28":{"ann":"(Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree <\\x10 VV -> {v : GHC.Types.Int | v < v}, \\x10 VV -> {v : GHC.Types.Int | v > v}> GHC.Types.Int [GHC.Types.Char]))","ident":"lq_anf$##7205759403792805526","row":133,"col":28},"14":{"ann":"(Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree <\\x10 VV -> {v : GHC.Types.Int | v < v}, \\x10 VV -> {v : GHC.Types.Int | v > v}> GHC.Types.Int [GHC.Types.Char]))","ident":"lq_anf$##7205759403792805532","row":133,"col":14},"50":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805517","row":133,"col":50},"83":{"ann":"[GHC.Types.Char]","ident":"lq_anf$##7205759403792805531","row":133,"col":83},"68":{"ann":"[GHC.Types.Char]","ident":"lq_anf$##7205759403792805525","row":133,"col":68},"1":{"ann":"(BSTTick.Tree <\\x2 VV -> {VV : GHC.Types.Int | VV < x2}, \\x2 VV -> {VV : GHC.Types.Int | VV > x2}> GHC.Types.Int [GHC.Types.Char])","ident":"BSTTick.tree2","row":133,"col":1},"40":{"ann":"(Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree <\\x10 VV -> {v : GHC.Types.Int | v < v}, \\x10 VV -> {v : GHC.Types.Int | v > v}> GHC.Types.Int [GHC.Types.Char]))","ident":"lq_anf$##7205759403792805520","row":133,"col":40},"52":{"ann":"[GHC.Types.Char]","ident":"lq_anf$##7205759403792805519","row":133,"col":52},"34":{"ann":"(BSTTick.Tree GHC.Types.Int [GHC.Types.Char])","ident":"lq_anf$##7205759403792805521","row":133,"col":34},"46":{"ann":"{VV : forall a b <r :: a a -> Bool, l :: a a -> Bool>.\n      {v : (BSTTick.Tree <\\x4 VV -> {VV : a<l x4> | true}, \\x4 VV -> {VV : a<r x4> | true}> a b) | size v == 0\n                                                                                                   && height v == 0\n                                                                                                   && v == Nil} | VV == Nil}","ident":"_","row":133,"col":46},"65":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805523","row":133,"col":65},"21":{"ann":"(BSTTick.Tree GHC.Types.Int [GHC.Types.Char])","ident":"lq_anf$##7205759403792805527","row":133,"col":21},"81":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805529","row":133,"col":81}},"81":{"28":{"ann":"{VV : a | VV == v}","ident":"v","row":81,"col":28},"12":{"ann":"a","ident":"v","row":81,"col":12},"1":{"ann":"forall a b .\n(GHC.Classes.Ord<[]> a) =>\nx2:(BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> a b) -> a -> b -> {t : (Language.Haskell.Liquid.RTick.Tick {VV : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> a b) | size VV == size x2 + 1\n                                                                                                                                                                                                                                 || size VV == size x2}) | tcost t <= height x2}","ident":"BSTTick.set'","row":81,"col":1},"26":{"ann":"{VV : a | VV == k}","ident":"k","row":81,"col":26},"16":{"ann":"{v : (GHC.Classes.Ord a) | v == $dOrd_a24K}","ident":"$dOrd_a24K","row":81,"col":16},"10":{"ann":"a","ident":"k","row":81,"col":10}},"108":{"14":{"ann":"{v : (Language.Haskell.Liquid.RTick.Tick (Functions_Types.Maybe (GHC.Types.Any (TYPE 'GHC.Types.LiftedRep)))) | 0 == tcost v}","ident":"lq_anf$##7205759403792805446","row":108,"col":14},"20":{"ann":"{VV : forall a .\n      {v : (Functions_Types.Maybe a) | (isJust v <=> false)\n                                       && v == Nothing} | VV == Nothing}","ident":"_","row":108,"col":20},"8":{"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805447","row":108,"col":8}}},"sptypes":[{"start":{"line":1,"column":1},"ann":"GHC.Types.Module","ident":"BSTTick.$trModule","stop":{"line":1,"column":1}},{"start":{"line":36,"column":1},"ann":"forall a b .\nx1:(BSTTick.Tree a b) -> {VV : GHC.Types.Int | VV == size x1\n                                               && VV >= 0}","ident":"BSTTick.size","stop":{"line":36,"column":5}},{"start":{"line":36,"column":23},"ann":"{v : GHC.Prim.Int# | v == 0}","ident":"lq_anf$##7205759403792805382","stop":{"line":36,"column":24}},{"start":{"line":37,"column":23},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805384","stop":{"line":37,"column":24}},{"start":{"line":37,"column":27},"ann":"{v : GHC.Types.Int | v == size l\n                     && v >= 0}","ident":"lq_anf$##7205759403792805385","stop":{"line":37,"column":33}},{"start":{"line":37,"column":32},"ann":"{v : (BSTTick.Tree a b) | height v >= 0\n                          && 0 <= height v\n                          && 0 <= size v\n                          && v == l}","ident":"l","stop":{"line":37,"column":33}},{"start":{"line":37,"column":36},"ann":"{v : GHC.Types.Int | v == size r\n                     && v >= 0}","ident":"lq_anf$##7205759403792805387","stop":{"line":37,"column":42}},{"start":{"line":37,"column":41},"ann":"{v : (BSTTick.Tree a b) | height v >= 0\n                          && 0 <= height v\n                          && 0 <= size v\n                          && v == r}","ident":"r","stop":{"line":37,"column":42}},{"start":{"line":43,"column":1},"ann":"forall a b .\nx1:(BSTTick.Tree a b) -> {VV : GHC.Types.Int | VV == height x1\n                                               && VV >= 0}","ident":"BSTTick.height","stop":{"line":43,"column":7}},{"start":{"line":43,"column":25},"ann":"{v : GHC.Prim.Int# | v == 0}","ident":"lq_anf$##7205759403792805435","stop":{"line":43,"column":26}},{"start":{"line":44,"column":25},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805437","stop":{"line":44,"column":26}},{"start":{"line":44,"column":29},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805440","stop":{"line":44,"column":54}},{"start":{"line":44,"column":33},"ann":"{v : GHC.Types.Int | v == height l\n                     && v >= 0}","ident":"lq_anf$##7205759403792805438","stop":{"line":44,"column":43}},{"start":{"line":44,"column":41},"ann":"{v : (BSTTick.Tree a b) | 0 <= height v\n                          && size v >= 0\n                          && 0 <= size v\n                          && v == l}","ident":"l","stop":{"line":44,"column":42}},{"start":{"line":44,"column":44},"ann":"{v : GHC.Types.Int | v == height r\n                     && v >= 0}","ident":"lq_anf$##7205759403792805439","stop":{"line":44,"column":54}},{"start":{"line":44,"column":52},"ann":"{v : (BSTTick.Tree a b) | 0 <= height v\n                          && size v >= 0\n                          && 0 <= size v\n                          && v == r}","ident":"r","stop":{"line":44,"column":53}},{"start":{"line":53,"column":1},"ann":"forall a b .\n{t : (Language.Haskell.Liquid.RTick.Tick {VV : (BSTTick.Tree <\\x2 VV -> {VV : a | VV < x2}, \\x2 VV -> {VV : a | VV > x2}> a b) | size VV == 0}) | tcost t == 0}","ident":"BSTTick.empty","stop":{"line":53,"column":6}},{"start":{"line":53,"column":14},"ann":"{VV : forall a b <r :: a a -> Bool, l :: a a -> Bool>.\n      {v : (BSTTick.Tree <\\x4 VV -> {VV : a<l x4> | true}, \\x4 VV -> {VV : a<r x4> | true}> a b) | size v == 0\n                                                                                                   && height v == 0\n                                                                                                   && v == Nil} | VV == Nil}","ident":"_","stop":{"line":53,"column":17}},{"start":{"line":58,"column":1},"ann":"forall a b .\n(GHC.Classes.Ord<[]> a) =>\na -> b -> {t : (Language.Haskell.Liquid.RTick.Tick {VV : (BSTTick.Tree <\\x2 VV -> {VV : a | VV < x2}, \\x2 VV -> {VV : a | VV > x2}> a b) | size VV == 1}) | tcost t == 0}","ident":"BSTTick.singleton","stop":{"line":58,"column":10}},{"start":{"line":58,"column":11},"ann":"a","ident":"k","stop":{"line":58,"column":12}},{"start":{"line":58,"column":13},"ann":"a","ident":"v","stop":{"line":58,"column":14}},{"start":{"line":58,"column":22},"ann":"{v' : (BSTTick.Tree a b) | val v' == v\n                           && key v' == k}","ident":"lq_anf$##7205759403792805341","stop":{"line":58,"column":40}},{"start":{"line":58,"column":28},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":58,"column":29}},{"start":{"line":58,"column":30},"ann":"{VV : a | VV == v}","ident":"v","stop":{"line":58,"column":31}},{"start":{"line":58,"column":32},"ann":"{VV : forall a b <r :: a a -> Bool, l :: a a -> Bool>.\n      {v : (BSTTick.Tree <\\x4 VV -> {VV : a<l x4> | true}, \\x4 VV -> {VV : a<r x4> | true}> a b) | size v == 0\n                                                                                                   && height v == 0\n                                                                                                   && v == Nil} | VV == Nil}","ident":"_","stop":{"line":58,"column":35}},{"start":{"line":58,"column":36},"ann":"{VV : forall a b <r :: a a -> Bool, l :: a a -> Bool>.\n      {v : (BSTTick.Tree <\\x4 VV -> {VV : a<l x4> | true}, \\x4 VV -> {VV : a<r x4> | true}> a b) | size v == 0\n                                                                                                   && height v == 0\n                                                                                                   && v == Nil} | VV == Nil}","ident":"_","stop":{"line":58,"column":39}},{"start":{"line":64,"column":1},"ann":"forall a b .\n(GHC.Classes.Ord<[]> a) =>\nx2:(BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> a b) -> a -> b -> {t : (Language.Haskell.Liquid.RTick.Tick {VV : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> a b) | size VV == size x2 + 1\n                                                                                                                                                                                                                                 || size VV == size x2}) | tcost t <= height x2}","ident":"BSTTick.set","stop":{"line":64,"column":4}},{"start":{"line":64,"column":9},"ann":"a","ident":"k","stop":{"line":64,"column":10}},{"start":{"line":64,"column":11},"ann":"a","ident":"v","stop":{"line":64,"column":12}},{"start":{"line":64,"column":17},"ann":"{v : (GHC.Classes.Ord a) | v == $dOrd_a23a}","ident":"$dOrd_a23a","stop":{"line":64,"column":30}},{"start":{"line":64,"column":27},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":64,"column":28}},{"start":{"line":64,"column":29},"ann":"{VV : a | VV == v}","ident":"v","stop":{"line":64,"column":30}},{"start":{"line":66,"column":7},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":66,"column":9}},{"start":{"line":66,"column":12},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":66,"column":13}},{"start":{"line":66,"column":20},"ann":"{v : GHC.Types.Int | v == tcost l'}","ident":"lq_anf$##7205759403792805410","stop":{"line":66,"column":28}},{"start":{"line":66,"column":26},"ann":"{v : (Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree a b)) | v == l'}","ident":"l'","stop":{"line":66,"column":28}},{"start":{"line":66,"column":30},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805412","stop":{"line":66,"column":31}},{"start":{"line":67,"column":26},"ann":"{VV : forall a .\n      x1:{v : GHC.Types.Int | v >= 0} -> x2:a -> {v : (Language.Haskell.Liquid.RTick.Tick a) | x2 == tval v\n                                                                                               && x1 == tcost v\n                                                                                               && v == waitN x1 x2\n                                                                                               && v == Tick x1 x2} | VV == waitN}","ident":"Language.Haskell.Liquid.RTick.waitN","stop":{"line":67,"column":66}},{"start":{"line":67,"column":32},"ann":"{v : GHC.Types.Int | v == tcost l'}","ident":"lq_anf$##7205759403792805417","stop":{"line":67,"column":42}},{"start":{"line":67,"column":39},"ann":"{v : (Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree a b)) | v == l'}","ident":"l'","stop":{"line":67,"column":41}},{"start":{"line":67,"column":44},"ann":"{v' : (BSTTick.Tree a b) | tr v' == r\n                           && val v' == v\n                           && key v' == k}","ident":"lq_anf$##7205759403792805419","stop":{"line":67,"column":66}},{"start":{"line":67,"column":50},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":67,"column":51}},{"start":{"line":67,"column":52},"ann":"{VV : a | VV == v}","ident":"v","stop":{"line":67,"column":53}},{"start":{"line":67,"column":54},"ann":"{v : (BSTTick.Tree a b) | v == tval l'}","ident":"lq_anf$##7205759403792805418","stop":{"line":67,"column":63}},{"start":{"line":67,"column":60},"ann":"{v : (Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree a b)) | v == l'}","ident":"l'","stop":{"line":67,"column":62}},{"start":{"line":67,"column":64},"ann":"{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV > k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == r}","ident":"r","stop":{"line":67,"column":65}},{"start":{"line":68,"column":26},"ann":"{VV : forall a .\n      x1:a -> {v : (Language.Haskell.Liquid.RTick.Tick a) | x1 == tval v\n                                                            && 1 == tcost v\n                                                            && v == wait x1\n                                                            && v == Tick 1 x1} | VV == wait}","ident":"Language.Haskell.Liquid.RTick.wait","stop":{"line":68,"column":53}},{"start":{"line":68,"column":31},"ann":"{v' : (BSTTick.Tree a b) | tr v' == r\n                           && val v' == v\n                           && key v' == k}","ident":"lq_anf$##7205759403792805416","stop":{"line":68,"column":53}},{"start":{"line":68,"column":37},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":68,"column":38}},{"start":{"line":68,"column":39},"ann":"{VV : a | VV == v}","ident":"v","stop":{"line":68,"column":40}},{"start":{"line":68,"column":41},"ann":"{v : (BSTTick.Tree a b) | v == tval l'}","ident":"lq_anf$##7205759403792805415","stop":{"line":68,"column":50}},{"start":{"line":68,"column":47},"ann":"{v : (Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree a b)) | v == l'}","ident":"l'","stop":{"line":68,"column":49}},{"start":{"line":68,"column":51},"ann":"{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV > k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == r}","ident":"r","stop":{"line":68,"column":52}},{"start":{"line":69,"column":7},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":69,"column":9}},{"start":{"line":69,"column":12},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":69,"column":13}},{"start":{"line":69,"column":20},"ann":"{v : GHC.Types.Int | v == tcost r'}","ident":"lq_anf$##7205759403792805400","stop":{"line":69,"column":28}},{"start":{"line":69,"column":26},"ann":"{v : (Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree a b)) | v == r'}","ident":"r'","stop":{"line":69,"column":28}},{"start":{"line":69,"column":30},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805402","stop":{"line":69,"column":31}},{"start":{"line":70,"column":26},"ann":"{VV : forall a .\n      x1:{v : GHC.Types.Int | v >= 0} -> x2:a -> {v : (Language.Haskell.Liquid.RTick.Tick a) | x2 == tval v\n                                                                                               && x1 == tcost v\n                                                                                               && v == waitN x1 x2\n                                                                                               && v == Tick x1 x2} | VV == waitN}","ident":"Language.Haskell.Liquid.RTick.waitN","stop":{"line":70,"column":66}},{"start":{"line":70,"column":33},"ann":"{v : GHC.Types.Int | v == tcost r'}","ident":"lq_anf$##7205759403792805407","stop":{"line":70,"column":43}},{"start":{"line":70,"column":40},"ann":"{v : (Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree a b)) | v == r'}","ident":"r'","stop":{"line":70,"column":42}},{"start":{"line":70,"column":44},"ann":"{v' : (BSTTick.Tree a b) | tl v' == l\n                           && val v' == v\n                           && key v' == k}","ident":"lq_anf$##7205759403792805409","stop":{"line":70,"column":66}},{"start":{"line":70,"column":50},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":70,"column":51}},{"start":{"line":70,"column":52},"ann":"{VV : a | VV == v}","ident":"v","stop":{"line":70,"column":53}},{"start":{"line":70,"column":54},"ann":"{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV < k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == l}","ident":"l","stop":{"line":70,"column":55}},{"start":{"line":70,"column":56},"ann":"{v : (BSTTick.Tree a b) | v == tval r'}","ident":"lq_anf$##7205759403792805408","stop":{"line":70,"column":65}},{"start":{"line":70,"column":62},"ann":"{v : (Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree a b)) | v == r'}","ident":"r'","stop":{"line":70,"column":64}},{"start":{"line":71,"column":26},"ann":"{VV : forall a .\n      x1:a -> {v : (Language.Haskell.Liquid.RTick.Tick a) | x1 == tval v\n                                                            && 1 == tcost v\n                                                            && v == wait x1\n                                                            && v == Tick 1 x1} | VV == wait}","ident":"Language.Haskell.Liquid.RTick.wait","stop":{"line":71,"column":53}},{"start":{"line":71,"column":31},"ann":"{v' : (BSTTick.Tree a b) | tl v' == l\n                           && val v' == v\n                           && key v' == k}","ident":"lq_anf$##7205759403792805406","stop":{"line":71,"column":53}},{"start":{"line":71,"column":37},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":71,"column":38}},{"start":{"line":71,"column":39},"ann":"{VV : a | VV == v}","ident":"v","stop":{"line":71,"column":40}},{"start":{"line":71,"column":41},"ann":"{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV < k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == l}","ident":"l","stop":{"line":71,"column":42}},{"start":{"line":71,"column":43},"ann":"{v : (BSTTick.Tree a b) | v == tval r'}","ident":"lq_anf$##7205759403792805405","stop":{"line":71,"column":52}},{"start":{"line":71,"column":49},"ann":"{v : (Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree a b)) | v == r'}","ident":"r'","stop":{"line":71,"column":51}},{"start":{"line":72,"column":20},"ann":"{VV : forall a .\n      x1:a -> {v : (Language.Haskell.Liquid.RTick.Tick a) | x1 == tval v\n                                                            && 1 == tcost v\n                                                            && v == wait x1\n                                                            && v == Tick 1 x1} | VV == wait}","ident":"Language.Haskell.Liquid.RTick.wait","stop":{"line":72,"column":40}},{"start":{"line":72,"column":25},"ann":"{v' : (BSTTick.Tree a b) | tr v' == r\n                           && tl v' == l\n                           && val v' == v\n                           && key v' == k\n                           && size v' == (1 + size l) + size r\n                           && height v' == 1 + (if height l > height r then height l else height r)\n                           && v' == Node k v l r}","ident":"lq_anf$##7205759403792805399","stop":{"line":72,"column":40}},{"start":{"line":72,"column":31},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":72,"column":32}},{"start":{"line":72,"column":33},"ann":"{VV : a | VV == v}","ident":"v","stop":{"line":72,"column":35}},{"start":{"line":72,"column":36},"ann":"{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV < k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == l}","ident":"l","stop":{"line":72,"column":37}},{"start":{"line":72,"column":38},"ann":"{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV > k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == r}","ident":"r","stop":{"line":72,"column":39}},{"start":{"line":74,"column":9},"ann":"(Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree a b))","ident":"l'","stop":{"line":74,"column":11}},{"start":{"line":74,"column":14},"ann":"(Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree a b))","ident":"_","stop":{"line":74,"column":34}},{"start":{"line":74,"column":19},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805393","stop":{"line":74,"column":20}},{"start":{"line":74,"column":21},"ann":"{v' : (Language.Haskell.Liquid.RTick.Tick {v : (BSTTick.Tree <\\x6 VV -> {VV : a | VV < x6}, \\x6 VV -> {VV : a | VV > x6}> a b) | size v == size l + 1\n                                                                                                                                 || size v == size l}) | tcost v' <= height l\n                                                                                                                                                         && v' == set l k v}","ident":"lq_anf$##7205759403792805394","stop":{"line":74,"column":34}},{"start":{"line":74,"column":26},"ann":"{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV < k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == l}","ident":"l","stop":{"line":74,"column":27}},{"start":{"line":74,"column":28},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":74,"column":30}},{"start":{"line":74,"column":31},"ann":"{VV : a | VV == v}","ident":"v","stop":{"line":74,"column":33}},{"start":{"line":75,"column":9},"ann":"(Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree a b))","ident":"r'","stop":{"line":75,"column":11}},{"start":{"line":75,"column":14},"ann":"(Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree a b))","ident":"_","stop":{"line":75,"column":34}},{"start":{"line":75,"column":19},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805390","stop":{"line":75,"column":20}},{"start":{"line":75,"column":21},"ann":"{v' : (Language.Haskell.Liquid.RTick.Tick {v : (BSTTick.Tree <\\x6 VV -> {VV : a | VV < x6}, \\x6 VV -> {VV : a | VV > x6}> a b) | size v == size r + 1\n                                                                                                                                 || size v == size r}) | tcost v' <= height r\n                                                                                                                                                         && v' == set r k v}","ident":"lq_anf$##7205759403792805391","stop":{"line":75,"column":34}},{"start":{"line":75,"column":26},"ann":"{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV > k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == r}","ident":"r","stop":{"line":75,"column":27}},{"start":{"line":75,"column":28},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":75,"column":30}},{"start":{"line":75,"column":31},"ann":"{VV : a | VV == v}","ident":"v","stop":{"line":75,"column":33}},{"start":{"line":81,"column":1},"ann":"forall a b .\n(GHC.Classes.Ord<[]> a) =>\nx2:(BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> a b) -> a -> b -> {t : (Language.Haskell.Liquid.RTick.Tick {VV : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> a b) | size VV == size x2 + 1\n                                                                                                                                                                                                                                 || size VV == size x2}) | tcost t <= height x2}","ident":"BSTTick.set'","stop":{"line":81,"column":5}},{"start":{"line":81,"column":10},"ann":"a","ident":"k","stop":{"line":81,"column":11}},{"start":{"line":81,"column":12},"ann":"a","ident":"v","stop":{"line":81,"column":13}},{"start":{"line":81,"column":16},"ann":"{v : (GHC.Classes.Ord a) | v == $dOrd_a24K}","ident":"$dOrd_a24K","stop":{"line":81,"column":29}},{"start":{"line":81,"column":26},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":81,"column":27}},{"start":{"line":81,"column":28},"ann":"{VV : a | VV == v}","ident":"v","stop":{"line":81,"column":29}},{"start":{"line":83,"column":7},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":83,"column":9}},{"start":{"line":83,"column":12},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":83,"column":13}},{"start":{"line":83,"column":19},"ann":"{VV : forall a .\n      x1:GHC.Types.Int -> x2:a -> {v : (Language.Haskell.Liquid.RTick.Tick a) | tval v == x2\n                                                                                && tcost v == x1\n                                                                                && v == Tick x1 x2} | VV == Tick}","ident":"Language.Haskell.Liquid.RTick.Tick","stop":{"line":83,"column":81}},{"start":{"line":83,"column":28},"ann":"GHC.Types.Int","ident":"n","stop":{"line":83,"column":29}},{"start":{"line":83,"column":30},"ann":"(BSTTick.Tree a b)","ident":"l'","stop":{"line":83,"column":32}},{"start":{"line":83,"column":35},"ann":"(Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree a b))","ident":"_","stop":{"line":83,"column":55}},{"start":{"line":83,"column":40},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805431","stop":{"line":83,"column":41}},{"start":{"line":83,"column":42},"ann":"{v' : (Language.Haskell.Liquid.RTick.Tick {v : (BSTTick.Tree <\\x6 VV -> {VV : a | VV < x6}, \\x6 VV -> {VV : a | VV > x6}> a b) | size v == size l + 1\n                                                                                                                                 || size v == size l}) | tcost v' <= height l\n                                                                                                                                                         && v' == set l k v}","ident":"lq_anf$##7205759403792805432","stop":{"line":83,"column":55}},{"start":{"line":83,"column":47},"ann":"{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV < k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == l}","ident":"l","stop":{"line":83,"column":48}},{"start":{"line":83,"column":49},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":83,"column":51}},{"start":{"line":83,"column":52},"ann":"{VV : a | VV == v}","ident":"v","stop":{"line":83,"column":54}},{"start":{"line":83,"column":64},"ann":"{v : GHC.Types.Int | v == n}","ident":"n","stop":{"line":83,"column":65}},{"start":{"line":83,"column":66},"ann":"{v' : (BSTTick.Tree a b) | tr v' == r\n                           && tl v' == l'\n                           && val v' == v\n                           && key v' == k\n                           && size v' == (1 + size l') + size r\n                           && height v' == 1 + (if height l' > height r then height l' else height r)\n                           && v' == Node k v l' r}","ident":"lq_anf$##7205759403792805433","stop":{"line":83,"column":81}},{"start":{"line":83,"column":72},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":83,"column":73}},{"start":{"line":83,"column":74},"ann":"{VV : a | VV == v}","ident":"v","stop":{"line":83,"column":75}},{"start":{"line":83,"column":76},"ann":"{v : (BSTTick.Tree a b) | height v >= 0\n                          && 0 <= height v\n                          && size v >= 0\n                          && 0 <= size v\n                          && v == l'}","ident":"l'","stop":{"line":83,"column":78}},{"start":{"line":83,"column":79},"ann":"{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV > k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == r}","ident":"r","stop":{"line":83,"column":80}},{"start":{"line":84,"column":7},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":84,"column":9}},{"start":{"line":84,"column":12},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":84,"column":13}},{"start":{"line":84,"column":19},"ann":"{VV : forall a .\n      x1:GHC.Types.Int -> x2:a -> {v : (Language.Haskell.Liquid.RTick.Tick a) | tval v == x2\n                                                                                && tcost v == x1\n                                                                                && v == Tick x1 x2} | VV == Tick}","ident":"Language.Haskell.Liquid.RTick.Tick","stop":{"line":84,"column":81}},{"start":{"line":84,"column":28},"ann":"GHC.Types.Int","ident":"n","stop":{"line":84,"column":29}},{"start":{"line":84,"column":30},"ann":"(BSTTick.Tree a b)","ident":"r'","stop":{"line":84,"column":32}},{"start":{"line":84,"column":35},"ann":"(Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree a b))","ident":"_","stop":{"line":84,"column":55}},{"start":{"line":84,"column":40},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805427","stop":{"line":84,"column":41}},{"start":{"line":84,"column":42},"ann":"{v' : (Language.Haskell.Liquid.RTick.Tick {v : (BSTTick.Tree <\\x6 VV -> {VV : a | VV < x6}, \\x6 VV -> {VV : a | VV > x6}> a b) | size v == size r + 1\n                                                                                                                                 || size v == size r}) | tcost v' <= height r\n                                                                                                                                                         && v' == set r k v}","ident":"lq_anf$##7205759403792805428","stop":{"line":84,"column":55}},{"start":{"line":84,"column":47},"ann":"{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV > k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == r}","ident":"r","stop":{"line":84,"column":48}},{"start":{"line":84,"column":49},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":84,"column":51}},{"start":{"line":84,"column":52},"ann":"{VV : a | VV == v}","ident":"v","stop":{"line":84,"column":54}},{"start":{"line":84,"column":64},"ann":"{v : GHC.Types.Int | v == n}","ident":"n","stop":{"line":84,"column":65}},{"start":{"line":84,"column":66},"ann":"{v' : (BSTTick.Tree a b) | tr v' == r'\n                           && tl v' == l\n                           && val v' == v\n                           && key v' == k\n                           && size v' == (1 + size l) + size r'\n                           && height v' == 1 + (if height l > height r' then height l else height r')\n                           && v' == Node k v l r'}","ident":"lq_anf$##7205759403792805429","stop":{"line":84,"column":81}},{"start":{"line":84,"column":72},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":84,"column":73}},{"start":{"line":84,"column":74},"ann":"{VV : a | VV == v}","ident":"v","stop":{"line":84,"column":75}},{"start":{"line":84,"column":76},"ann":"{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV < k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == l}","ident":"l","stop":{"line":84,"column":77}},{"start":{"line":84,"column":78},"ann":"{v : (BSTTick.Tree a b) | height v >= 0\n                          && 0 <= height v\n                          && size v >= 0\n                          && 0 <= size v\n                          && v == r'}","ident":"r'","stop":{"line":84,"column":80}},{"start":{"line":85,"column":19},"ann":"{VV : forall a .\n      x1:a -> {v : (Language.Haskell.Liquid.RTick.Tick a) | x1 == tval v\n                                                            && 1 == tcost v\n                                                            && v == wait x1\n                                                            && v == Tick 1 x1} | VV == wait}","ident":"Language.Haskell.Liquid.RTick.wait","stop":{"line":85,"column":39}},{"start":{"line":85,"column":24},"ann":"{v' : (BSTTick.Tree a b) | tr v' == r\n                           && tl v' == l\n                           && val v' == v\n                           && key v' == k\n                           && size v' == (1 + size l) + size r\n                           && height v' == 1 + (if height l > height r then height l else height r)\n                           && v' == Node k v l r}","ident":"lq_anf$##7205759403792805425","stop":{"line":85,"column":39}},{"start":{"line":85,"column":30},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":85,"column":31}},{"start":{"line":85,"column":32},"ann":"{VV : a | VV == v}","ident":"v","stop":{"line":85,"column":34}},{"start":{"line":85,"column":35},"ann":"{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV < k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == l}","ident":"l","stop":{"line":85,"column":36}},{"start":{"line":85,"column":37},"ann":"{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV > k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == r}","ident":"r","stop":{"line":85,"column":38}},{"start":{"line":91,"column":1},"ann":"forall a b .\n(GHC.Classes.Ord<[]> a) =>\nx2:(BSTTick.Tree <\\x2 VV -> {VV : a | VV < x2}, \\x2 VV -> {VV : a | VV > x2}> a b) -> a -> {t : (Language.Haskell.Liquid.RTick.Tick (Functions_Types.Maybe b)) | tcost t <= height x2}","ident":"BSTTick.get","stop":{"line":91,"column":4}},{"start":{"line":91,"column":16},"ann":"{v : (Functions_Types.Maybe a) | (isJust v <=> false)\n                                 && v == Nothing}","ident":"lq_anf$##7205759403792805343","stop":{"line":91,"column":28}},{"start":{"line":91,"column":21},"ann":"{VV : forall a .\n      {v : (Functions_Types.Maybe a) | (isJust v <=> false)\n                                       && v == Nothing} | VV == Nothing}","ident":"_","stop":{"line":91,"column":28}},{"start":{"line":93,"column":7},"ann":"a","ident":"ds_d2Zn","stop":{"line":93,"column":10}},{"start":{"line":93,"column":13},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":93,"column":14}},{"start":{"line":93,"column":20},"ann":"{VV : forall a .\n      x1:GHC.Types.Int -> x2:(Language.Haskell.Liquid.RTick.Tick a) -> {v : (Language.Haskell.Liquid.RTick.Tick a) | tval x2 == tval v\n                                                                                                                     && x1 + tcost x2 == tcost v\n                                                                                                                     && v == step x1 x2\n                                                                                                                     && v == Tick (x1 + tcost x2) (tval x2)} | VV == step}","ident":"Language.Haskell.Liquid.RTick.step","stop":{"line":93,"column":38}},{"start":{"line":93,"column":25},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805353","stop":{"line":93,"column":26}},{"start":{"line":93,"column":27},"ann":"{v : (Language.Haskell.Liquid.RTick.Tick (Functions_Types.Maybe a)) | tcost v <= height l}","ident":"lq_anf$##7205759403792805354","stop":{"line":93,"column":38}},{"start":{"line":93,"column":32},"ann":"{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV < k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == l}","ident":"l","stop":{"line":93,"column":33}},{"start":{"line":93,"column":34},"ann":"a","ident":"ds_d2Zn","stop":{"line":93,"column":37}},{"start":{"line":94,"column":7},"ann":"a","ident":"ds_d2Zn","stop":{"line":94,"column":10}},{"start":{"line":94,"column":13},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":94,"column":14}},{"start":{"line":94,"column":20},"ann":"{VV : forall a .\n      x1:GHC.Types.Int -> x2:(Language.Haskell.Liquid.RTick.Tick a) -> {v : (Language.Haskell.Liquid.RTick.Tick a) | tval x2 == tval v\n                                                                                                                     && x1 + tcost x2 == tcost v\n                                                                                                                     && v == step x1 x2\n                                                                                                                     && v == Tick (x1 + tcost x2) (tval x2)} | VV == step}","ident":"Language.Haskell.Liquid.RTick.step","stop":{"line":94,"column":38}},{"start":{"line":94,"column":25},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805350","stop":{"line":94,"column":26}},{"start":{"line":94,"column":27},"ann":"{v : (Language.Haskell.Liquid.RTick.Tick (Functions_Types.Maybe a)) | tcost v <= height r}","ident":"lq_anf$##7205759403792805351","stop":{"line":94,"column":38}},{"start":{"line":94,"column":32},"ann":"{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV > k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == r}","ident":"r","stop":{"line":94,"column":33}},{"start":{"line":94,"column":34},"ann":"a","ident":"ds_d2Zn","stop":{"line":94,"column":37}},{"start":{"line":95,"column":19},"ann":"{VV : forall a .\n      x1:a -> {v : (Language.Haskell.Liquid.RTick.Tick a) | x1 == tval v\n                                                            && 0 == tcost v\n                                                            && v == pure x1\n                                                            && v == Tick 0 x1} | VV == pure}","ident":"Language.Haskell.Liquid.RTick.pure","stop":{"line":95,"column":32}},{"start":{"line":95,"column":24},"ann":"{v' : (Functions_Types.Maybe a) | Just##lqdc##$select v' == v\n                                  && (isJust v' <=> true)\n                                  && fromJust v' == v\n                                  && v' == Just v}","ident":"lq_anf$##7205759403792805348","stop":{"line":95,"column":32}},{"start":{"line":95,"column":30},"ann":"{VV : a | VV == v}","ident":"v","stop":{"line":95,"column":31}},{"start":{"line":106,"column":1},"ann":"forall a b .\n(GHC.Classes.Ord<[]> a) =>\nx2:(BSTTick.Tree <\\x2 VV -> {VV : a | VV < x2}, \\x2 VV -> {VV : a | VV > x2}> a b) -> x3:a -> {VV : () | tcost (get x2 x3) <= height x2}","ident":"BSTTick.getCost","stop":{"line":106,"column":8}},{"start":{"line":106,"column":9},"ann":"(BSTTick.Tree <\\x2 VV -> {VV : a | VV < x2}, \\x2 VV -> {VV : a | VV > x2}> a b)","ident":"b","stop":{"line":106,"column":10}},{"start":{"line":106,"column":17},"ann":"a","ident":"k","stop":{"line":106,"column":18}},{"start":{"line":107,"column":6},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805444","stop":{"line":107,"column":21}},{"start":{"line":107,"column":12},"ann":"(Language.Haskell.Liquid.RTick.Tick (Functions_Types.Maybe a))","ident":"lq_anf$##7205759403792805443","stop":{"line":107,"column":21}},{"start":{"line":107,"column":17},"ann":"{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> a b) | height v >= 0\n                                                                                       && 0 <= height v\n                                                                                       && size v >= 0\n                                                                                       && 0 <= size v\n                                                                                       && v == b\n                                                                                       && size v == 0\n                                                                                       && height v == 0\n                                                                                       && v == Nil}","ident":"lq_anf$##7205759403792805441","stop":{"line":107,"column":18}},{"start":{"line":107,"column":19},"ann":"{VV : a | VV == k}","ident":"k","stop":{"line":107,"column":20}},{"start":{"line":108,"column":8},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805447","stop":{"line":108,"column":28}},{"start":{"line":108,"column":14},"ann":"{v : (Language.Haskell.Liquid.RTick.Tick (Functions_Types.Maybe (GHC.Types.Any (TYPE 'GHC.Types.LiftedRep)))) | 0 == tcost v}","ident":"lq_anf$##7205759403792805446","stop":{"line":108,"column":28}},{"start":{"line":108,"column":20},"ann":"{VV : forall a .\n      {v : (Functions_Types.Maybe a) | (isJust v <=> false)\n                                       && v == Nothing} | VV == Nothing}","ident":"_","stop":{"line":108,"column":27}},{"start":{"line":109,"column":8},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805453","stop":{"line":109,"column":30}},{"start":{"line":109,"column":14},"ann":"(Language.Haskell.Liquid.RTick.Tick (Functions_Types.Maybe (GHC.Types.Any (TYPE 'GHC.Types.LiftedRep))))","ident":"lq_anf$##7205759403792805452","stop":{"line":109,"column":30}},{"start":{"line":109,"column":20},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805450","stop":{"line":109,"column":21}},{"start":{"line":109,"column":22},"ann":"{VV : forall a .\n      {v : (Functions_Types.Maybe a) | (isJust v <=> false)\n                                       && v == Nothing} | VV == Nothing}","ident":"_","stop":{"line":109,"column":29}},{"start":{"line":110,"column":8},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805456","stop":{"line":110,"column":9}},{"start":{"line":111,"column":8},"ann":"{v : GHC.Types.Int | v >= 0}","ident":"lq_anf$##7205759403792805458","stop":{"line":111,"column":16}},{"start":{"line":111,"column":15},"ann":"{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> a b) | height v >= 0\n                                                                                       && 0 <= height v\n                                                                                       && size v >= 0\n                                                                                       && 0 <= size v\n                                                                                       && v == b\n                                                                                       && size v == 0\n                                                                                       && height v == 0\n                                                                                       && v == Nil}","ident":"lq_anf$##7205759403792805441","stop":{"line":111,"column":16}},{"start":{"line":112,"column":8},"ann":"{v : Language.Haskell.Liquid.ProofCombinators.QED | v == QED}","ident":"Language.Haskell.Liquid.ProofCombinators.QED","stop":{"line":112,"column":11}},{"start":{"line":120,"column":1},"ann":"(BSTTick.Tree <\\x2 VV -> {VV : GHC.Types.Int | VV < x2}, \\x2 VV -> {VV : GHC.Types.Int | VV > x2}> GHC.Types.Int [GHC.Types.Char])","ident":"BSTTick.tree1","stop":{"line":120,"column":6}},{"start":{"line":120,"column":14},"ann":"(Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree <\\x10 VV -> {v : GHC.Types.Int | v < v}, \\x10 VV -> {v : GHC.Types.Int | v > v}> GHC.Types.Int [GHC.Types.Char]))","ident":"lq_anf$##7205759403792805514","stop":{"line":120,"column":82}},{"start":{"line":120,"column":20},"ann":"(BSTTick.Tree GHC.Types.Int [GHC.Types.Char])","ident":"lq_anf$##7205759403792805509","stop":{"line":120,"column":70}},{"start":{"line":120,"column":27},"ann":"(Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree <\\x10 VV -> {v : GHC.Types.Int | v < v}, \\x10 VV -> {v : GHC.Types.Int | v > v}> GHC.Types.Int [GHC.Types.Char]))","ident":"lq_anf$##7205759403792805508","stop":{"line":120,"column":68}},{"start":{"line":120,"column":32},"ann":"(BSTTick.Tree GHC.Types.Int [GHC.Types.Char])","ident":"lq_anf$##7205759403792805503","stop":{"line":120,"column":58}},{"start":{"line":120,"column":38},"ann":"(Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree <\\x10 VV -> {v : GHC.Types.Int | v < v}, \\x10 VV -> {v : GHC.Types.Int | v > v}> GHC.Types.Int [GHC.Types.Char]))","ident":"lq_anf$##7205759403792805502","stop":{"line":120,"column":56}},{"start":{"line":120,"column":43},"ann":"{VV : forall a b <r :: a a -> Bool, l :: a a -> Bool>.\n      {v : (BSTTick.Tree <\\x4 VV -> {VV : a<l x4> | true}, \\x4 VV -> {VV : a<r x4> | true}> a b) | size v == 0\n                                                                                                   && height v == 0\n                                                                                                   && v == Nil} | VV == Nil}","ident":"_","stop":{"line":120,"column":46}},{"start":{"line":120,"column":47},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805499","stop":{"line":120,"column":49}},{"start":{"line":120,"column":50},"ann":"[GHC.Types.Char]","ident":"lq_anf$##7205759403792805501","stop":{"line":120,"column":55}},{"start":{"line":120,"column":59},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805505","stop":{"line":120,"column":61}},{"start":{"line":120,"column":62},"ann":"[GHC.Types.Char]","ident":"lq_anf$##7205759403792805507","stop":{"line":120,"column":67}},{"start":{"line":120,"column":71},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805511","stop":{"line":120,"column":73}},{"start":{"line":120,"column":74},"ann":"[GHC.Types.Char]","ident":"lq_anf$##7205759403792805513","stop":{"line":120,"column":81}},{"start":{"line":126,"column":1},"ann":"() -> {VV : GHC.Types.Bool | VV}","ident":"BSTTick.test","stop":{"line":126,"column":5}},{"start":{"line":126,"column":12},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805537","stop":{"line":126,"column":32}},{"start":{"line":126,"column":18},"ann":"{v : (Language.Haskell.Liquid.RTick.Tick (Functions_Types.Maybe [GHC.Types.Char])) | tcost v <= height tree1}","ident":"lq_anf$##7205759403792805536","stop":{"line":126,"column":32}},{"start":{"line":126,"column":23},"ann":"{v : (BSTTick.Tree <\\x10 VV -> {v : GHC.Types.Int | v < v}, \\x10 VV -> {v : GHC.Types.Int | v > v}> GHC.Types.Int [GHC.Types.Char]) | v == tree1\n                                                                                                                                      && v == tval (set (tval (set (tval (set Nil 10 \"cat\")) 20 \"dog\")) 30 \"zebra\")\n                                                                                                                                      && height v >= 0\n                                                                                                                                      && 0 <= height v\n                                                                                                                                      && size v >= 0\n                                                                                                                                      && 0 <= size v}","ident":"BSTTick.tree1","stop":{"line":126,"column":28}},{"start":{"line":126,"column":29},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805535","stop":{"line":126,"column":31}},{"start":{"line":126,"column":36},"ann":"{v : GHC.Types.Int | v == height tree1\n                     && v >= 0}","ident":"lq_anf$##7205759403792805538","stop":{"line":126,"column":48}},{"start":{"line":126,"column":43},"ann":"{v : (BSTTick.Tree <\\x10 VV -> {v : GHC.Types.Int | v < v}, \\x10 VV -> {v : GHC.Types.Int | v > v}> GHC.Types.Int [GHC.Types.Char]) | v == tree1\n                                                                                                                                      && v == tval (set (tval (set (tval (set Nil 10 \"cat\")) 20 \"dog\")) 30 \"zebra\")\n                                                                                                                                      && height v >= 0\n                                                                                                                                      && 0 <= height v\n                                                                                                                                      && size v >= 0\n                                                                                                                                      && 0 <= size v}","ident":"BSTTick.tree1","stop":{"line":126,"column":48}},{"start":{"line":133,"column":1},"ann":"(BSTTick.Tree <\\x2 VV -> {VV : GHC.Types.Int | VV < x2}, \\x2 VV -> {VV : GHC.Types.Int | VV > x2}> GHC.Types.Int [GHC.Types.Char])","ident":"BSTTick.tree2","stop":{"line":133,"column":6}},{"start":{"line":133,"column":14},"ann":"(Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree <\\x10 VV -> {v : GHC.Types.Int | v < v}, \\x10 VV -> {v : GHC.Types.Int | v > v}> GHC.Types.Int [GHC.Types.Char]))","ident":"lq_anf$##7205759403792805532","stop":{"line":133,"column":92}},{"start":{"line":133,"column":21},"ann":"(BSTTick.Tree GHC.Types.Int [GHC.Types.Char])","ident":"lq_anf$##7205759403792805527","stop":{"line":133,"column":80}},{"start":{"line":133,"column":28},"ann":"(Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree <\\x10 VV -> {v : GHC.Types.Int | v < v}, \\x10 VV -> {v : GHC.Types.Int | v > v}> GHC.Types.Int [GHC.Types.Char]))","ident":"lq_anf$##7205759403792805526","stop":{"line":133,"column":78}},{"start":{"line":133,"column":34},"ann":"(BSTTick.Tree GHC.Types.Int [GHC.Types.Char])","ident":"lq_anf$##7205759403792805521","stop":{"line":133,"column":64}},{"start":{"line":133,"column":40},"ann":"(Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree <\\x10 VV -> {v : GHC.Types.Int | v < v}, \\x10 VV -> {v : GHC.Types.Int | v > v}> GHC.Types.Int [GHC.Types.Char]))","ident":"lq_anf$##7205759403792805520","stop":{"line":133,"column":62}},{"start":{"line":133,"column":46},"ann":"{VV : forall a b <r :: a a -> Bool, l :: a a -> Bool>.\n      {v : (BSTTick.Tree <\\x4 VV -> {VV : a<l x4> | true}, \\x4 VV -> {VV : a<r x4> | true}> a b) | size v == 0\n                                                                                                   && height v == 0\n                                                                                                   && v == Nil} | VV == Nil}","ident":"_","stop":{"line":133,"column":49}},{"start":{"line":133,"column":50},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805517","stop":{"line":133,"column":51}},{"start":{"line":133,"column":52},"ann":"[GHC.Types.Char]","ident":"lq_anf$##7205759403792805519","stop":{"line":133,"column":61}},{"start":{"line":133,"column":65},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805523","stop":{"line":133,"column":67}},{"start":{"line":133,"column":68},"ann":"[GHC.Types.Char]","ident":"lq_anf$##7205759403792805525","stop":{"line":133,"column":77}},{"start":{"line":133,"column":81},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805529","stop":{"line":133,"column":82}},{"start":{"line":133,"column":83},"ann":"[GHC.Types.Char]","ident":"lq_anf$##7205759403792805531","stop":{"line":133,"column":91}},{"start":{"line":137,"column":1},"ann":"() -> {VV : GHC.Types.Bool | VV}","ident":"BSTTick.test2","stop":{"line":137,"column":6}},{"start":{"line":137,"column":12},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805545","stop":{"line":137,"column":44}},{"start":{"line":137,"column":18},"ann":"{v : (Language.Haskell.Liquid.RTick.Tick {v : (BSTTick.Tree <\\x12 VV -> {v : GHC.Types.Int | v < v}, \\x12 VV -> {v : GHC.Types.Int | v > v}> GHC.Types.Int [GHC.Types.Char]) | size v == size tree2 + 1\n                                                                                                                                                                               || size v == size tree2}) | tcost v <= height tree2}","ident":"lq_anf$##7205759403792805544","stop":{"line":137,"column":44}},{"start":{"line":137,"column":24},"ann":"{v : (BSTTick.Tree <\\x10 VV -> {v : GHC.Types.Int | v < v}, \\x10 VV -> {v : GHC.Types.Int | v > v}> GHC.Types.Int [GHC.Types.Char]) | v == tree2\n                                                                                                                                      && v == tval (set' (tval (set' (tval (set' Nil 5 \"siamese\")) 18 \"bobtail\")) 3 \"sphinx\")\n                                                                                                                                      && height v >= 0\n                                                                                                                                      && 0 <= height v\n                                                                                                                                      && size v >= 0\n                                                                                                                                      && 0 <= size v}","ident":"BSTTick.tree2","stop":{"line":137,"column":29}},{"start":{"line":137,"column":30},"ann":"GHC.Types.Int","ident":"lq_anf$##7205759403792805541","stop":{"line":137,"column":32}},{"start":{"line":137,"column":33},"ann":"[GHC.Types.Char]","ident":"lq_anf$##7205759403792805543","stop":{"line":137,"column":43}},{"start":{"line":137,"column":48},"ann":"{v : GHC.Types.Int | v == height tree2\n                     && v >= 0}","ident":"lq_anf$##7205759403792805546","stop":{"line":137,"column":60}},{"start":{"line":137,"column":55},"ann":"{v : (BSTTick.Tree <\\x10 VV -> {v : GHC.Types.Int | v < v}, \\x10 VV -> {v : GHC.Types.Int | v > v}> GHC.Types.Int [GHC.Types.Char]) | v == tree2\n                                                                                                                                      && v == tval (set' (tval (set' (tval (set' Nil 5 \"siamese\")) 18 \"bobtail\")) 3 \"sphinx\")\n                                                                                                                                      && height v >= 0\n                                                                                                                                      && 0 <= height v\n                                                                                                                                      && size v >= 0\n                                                                                                                                      && 0 <= size v}","ident":"BSTTick.tree2","stop":{"line":137,"column":60}}],"errors":[{"start":{"line":106,"column":1},"stop":{"line":112,"column":11},"message":"Type Mismatch\n    .\n    The inferred type\n      VV : {v : GHC.Prim.Addr# | v == \"BSTTick.hs:(106,1)-(112,10)|function getCost\"}\n    .\n    is not a subtype of the required type\n      VV : {VV : GHC.Prim.Addr# | 5 < 4}\n    ."}]}