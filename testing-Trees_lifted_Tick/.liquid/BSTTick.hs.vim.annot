1:1-1:1::BSTTick.$trModule :: "GHC.Types.Module"
36:1-36:5::BSTTick.size :: "forall a b .\nx1:(BSTTick.Tree a b) -> {VV : GHC.Types.Int | VV == size x1\n                                               && VV >= 0}"
36:23-36:24::lq_anf$##7205759403792805382 :: "{v : GHC.Prim.Int# | v == 0}"
37:23-37:24::lq_anf$##7205759403792805384 :: "GHC.Types.Int"
37:27-37:33::lq_anf$##7205759403792805385 :: "{v : GHC.Types.Int | v == size l\n                     && v >= 0}"
37:32-37:33::l :: "{v : (BSTTick.Tree a b) | height v >= 0\n                          && 0 <= height v\n                          && 0 <= size v\n                          && v == l}"
37:36-37:42::lq_anf$##7205759403792805387 :: "{v : GHC.Types.Int | v == size r\n                     && v >= 0}"
37:41-37:42::r :: "{v : (BSTTick.Tree a b) | height v >= 0\n                          && 0 <= height v\n                          && 0 <= size v\n                          && v == r}"
43:1-43:7::BSTTick.height :: "forall a b .\nx1:(BSTTick.Tree a b) -> {VV : GHC.Types.Int | VV == height x1\n                                               && VV >= 0}"
43:25-43:26::lq_anf$##7205759403792805435 :: "{v : GHC.Prim.Int# | v == 0}"
44:25-44:26::lq_anf$##7205759403792805437 :: "GHC.Types.Int"
44:29-44:54::lq_anf$##7205759403792805440 :: "GHC.Types.Int"
44:33-44:43::lq_anf$##7205759403792805438 :: "{v : GHC.Types.Int | v == height l\n                     && v >= 0}"
44:41-44:42::l :: "{v : (BSTTick.Tree a b) | 0 <= height v\n                          && size v >= 0\n                          && 0 <= size v\n                          && v == l}"
44:44-44:54::lq_anf$##7205759403792805439 :: "{v : GHC.Types.Int | v == height r\n                     && v >= 0}"
44:52-44:53::r :: "{v : (BSTTick.Tree a b) | 0 <= height v\n                          && size v >= 0\n                          && 0 <= size v\n                          && v == r}"
53:1-53:6::BSTTick.empty :: "forall a b .\n{t : (Language.Haskell.Liquid.RTick.Tick {VV : (BSTTick.Tree <\\x2 VV -> {VV : a | VV < x2}, \\x2 VV -> {VV : a | VV > x2}> a b) | size VV == 0}) | tcost t == 0}"
53:14-53:17::_ :: "{VV : forall a b <r :: a a -> Bool, l :: a a -> Bool>.\n      {v : (BSTTick.Tree <\\x4 VV -> {VV : a<l x4> | true}, \\x4 VV -> {VV : a<r x4> | true}> a b) | size v == 0\n                                                                                                   && height v == 0\n                                                                                                   && v == Nil} | VV == Nil}"
58:1-58:10::BSTTick.singleton :: "forall a b .\n(GHC.Classes.Ord<[]> a) =>\na -> b -> {t : (Language.Haskell.Liquid.RTick.Tick {VV : (BSTTick.Tree <\\x2 VV -> {VV : a | VV < x2}, \\x2 VV -> {VV : a | VV > x2}> a b) | size VV == 1}) | tcost t == 0}"
58:11-58:12::k :: "a"
58:13-58:14::v :: "a"
58:22-58:40::lq_anf$##7205759403792805341 :: "{v' : (BSTTick.Tree a b) | val v' == v\n                           && key v' == k}"
58:28-58:29::k :: "{VV : a | VV == k}"
58:30-58:31::v :: "{VV : a | VV == v}"
58:32-58:35::_ :: "{VV : forall a b <r :: a a -> Bool, l :: a a -> Bool>.\n      {v : (BSTTick.Tree <\\x4 VV -> {VV : a<l x4> | true}, \\x4 VV -> {VV : a<r x4> | true}> a b) | size v == 0\n                                                                                                   && height v == 0\n                                                                                                   && v == Nil} | VV == Nil}"
58:36-58:39::_ :: "{VV : forall a b <r :: a a -> Bool, l :: a a -> Bool>.\n      {v : (BSTTick.Tree <\\x4 VV -> {VV : a<l x4> | true}, \\x4 VV -> {VV : a<r x4> | true}> a b) | size v == 0\n                                                                                                   && height v == 0\n                                                                                                   && v == Nil} | VV == Nil}"
64:1-64:4::BSTTick.set :: "forall a b .\n(GHC.Classes.Ord<[]> a) =>\nx2:(BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> a b) -> a -> b -> {t : (Language.Haskell.Liquid.RTick.Tick {VV : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> a b) | size VV == size x2 + 1\n                                                                                                                                                                                                                                 || size VV == size x2}) | tcost t <= height x2}"
64:9-64:10::k :: "a"
64:11-64:12::v :: "a"
64:17-64:30::$dOrd_a23a :: "{v : (GHC.Classes.Ord a) | v == $dOrd_a23a}"
64:27-64:28::k :: "{VV : a | VV == k}"
64:29-64:30::v :: "{VV : a | VV == v}"
66:7-66:9::k :: "{VV : a | VV == k}"
66:12-66:13::k :: "{VV : a | VV == k}"
66:20-66:28::lq_anf$##7205759403792805410 :: "{v : GHC.Types.Int | v == tcost l'}"
66:26-66:28::l' :: "{v : (Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree a b)) | v == l'}"
66:30-66:31::lq_anf$##7205759403792805412 :: "GHC.Types.Int"
67:26-67:66::Language.Haskell.Liquid.RTick.waitN :: "{VV : forall a .\n      x1:{v : GHC.Types.Int | v >= 0} -> x2:a -> {v : (Language.Haskell.Liquid.RTick.Tick a) | x2 == tval v\n                                                                                               && x1 == tcost v\n                                                                                               && v == waitN x1 x2\n                                                                                               && v == Tick x1 x2} | VV == waitN}"
67:32-67:42::lq_anf$##7205759403792805417 :: "{v : GHC.Types.Int | v == tcost l'}"
67:39-67:41::l' :: "{v : (Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree a b)) | v == l'}"
67:44-67:66::lq_anf$##7205759403792805419 :: "{v' : (BSTTick.Tree a b) | tr v' == r\n                           && val v' == v\n                           && key v' == k}"
67:50-67:51::k :: "{VV : a | VV == k}"
67:52-67:53::v :: "{VV : a | VV == v}"
67:54-67:63::lq_anf$##7205759403792805418 :: "{v : (BSTTick.Tree a b) | v == tval l'}"
67:60-67:62::l' :: "{v : (Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree a b)) | v == l'}"
67:64-67:65::r :: "{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV > k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == r}"
68:26-68:53::Language.Haskell.Liquid.RTick.wait :: "{VV : forall a .\n      x1:a -> {v : (Language.Haskell.Liquid.RTick.Tick a) | x1 == tval v\n                                                            && 1 == tcost v\n                                                            && v == wait x1\n                                                            && v == Tick 1 x1} | VV == wait}"
68:31-68:53::lq_anf$##7205759403792805416 :: "{v' : (BSTTick.Tree a b) | tr v' == r\n                           && val v' == v\n                           && key v' == k}"
68:37-68:38::k :: "{VV : a | VV == k}"
68:39-68:40::v :: "{VV : a | VV == v}"
68:41-68:50::lq_anf$##7205759403792805415 :: "{v : (BSTTick.Tree a b) | v == tval l'}"
68:47-68:49::l' :: "{v : (Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree a b)) | v == l'}"
68:51-68:52::r :: "{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV > k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == r}"
69:7-69:9::k :: "{VV : a | VV == k}"
69:12-69:13::k :: "{VV : a | VV == k}"
69:20-69:28::lq_anf$##7205759403792805400 :: "{v : GHC.Types.Int | v == tcost r'}"
69:26-69:28::r' :: "{v : (Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree a b)) | v == r'}"
69:30-69:31::lq_anf$##7205759403792805402 :: "GHC.Types.Int"
70:26-70:66::Language.Haskell.Liquid.RTick.waitN :: "{VV : forall a .\n      x1:{v : GHC.Types.Int | v >= 0} -> x2:a -> {v : (Language.Haskell.Liquid.RTick.Tick a) | x2 == tval v\n                                                                                               && x1 == tcost v\n                                                                                               && v == waitN x1 x2\n                                                                                               && v == Tick x1 x2} | VV == waitN}"
70:33-70:43::lq_anf$##7205759403792805407 :: "{v : GHC.Types.Int | v == tcost r'}"
70:40-70:42::r' :: "{v : (Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree a b)) | v == r'}"
70:44-70:66::lq_anf$##7205759403792805409 :: "{v' : (BSTTick.Tree a b) | tl v' == l\n                           && val v' == v\n                           && key v' == k}"
70:50-70:51::k :: "{VV : a | VV == k}"
70:52-70:53::v :: "{VV : a | VV == v}"
70:54-70:55::l :: "{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV < k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == l}"
70:56-70:65::lq_anf$##7205759403792805408 :: "{v : (BSTTick.Tree a b) | v == tval r'}"
70:62-70:64::r' :: "{v : (Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree a b)) | v == r'}"
71:26-71:53::Language.Haskell.Liquid.RTick.wait :: "{VV : forall a .\n      x1:a -> {v : (Language.Haskell.Liquid.RTick.Tick a) | x1 == tval v\n                                                            && 1 == tcost v\n                                                            && v == wait x1\n                                                            && v == Tick 1 x1} | VV == wait}"
71:31-71:53::lq_anf$##7205759403792805406 :: "{v' : (BSTTick.Tree a b) | tl v' == l\n                           && val v' == v\n                           && key v' == k}"
71:37-71:38::k :: "{VV : a | VV == k}"
71:39-71:40::v :: "{VV : a | VV == v}"
71:41-71:42::l :: "{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV < k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == l}"
71:43-71:52::lq_anf$##7205759403792805405 :: "{v : (BSTTick.Tree a b) | v == tval r'}"
71:49-71:51::r' :: "{v : (Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree a b)) | v == r'}"
72:20-72:40::Language.Haskell.Liquid.RTick.wait :: "{VV : forall a .\n      x1:a -> {v : (Language.Haskell.Liquid.RTick.Tick a) | x1 == tval v\n                                                            && 1 == tcost v\n                                                            && v == wait x1\n                                                            && v == Tick 1 x1} | VV == wait}"
72:25-72:40::lq_anf$##7205759403792805399 :: "{v' : (BSTTick.Tree a b) | tr v' == r\n                           && tl v' == l\n                           && val v' == v\n                           && key v' == k\n                           && size v' == (1 + size l) + size r\n                           && height v' == 1 + (if height l > height r then height l else height r)\n                           && v' == Node k v l r}"
72:31-72:32::k :: "{VV : a | VV == k}"
72:33-72:35::v :: "{VV : a | VV == v}"
72:36-72:37::l :: "{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV < k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == l}"
72:38-72:39::r :: "{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV > k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == r}"
74:9-74:11::l' :: "(Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree a b))"
74:14-74:34::_ :: "(Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree a b))"
74:19-74:20::lq_anf$##7205759403792805393 :: "GHC.Types.Int"
74:21-74:34::lq_anf$##7205759403792805394 :: "{v' : (Language.Haskell.Liquid.RTick.Tick {v : (BSTTick.Tree <\\x6 VV -> {VV : a | VV < x6}, \\x6 VV -> {VV : a | VV > x6}> a b) | size v == size l + 1\n                                                                                                                                 || size v == size l}) | tcost v' <= height l\n                                                                                                                                                         && v' == set l k v}"
74:26-74:27::l :: "{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV < k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == l}"
74:28-74:30::k :: "{VV : a | VV == k}"
74:31-74:33::v :: "{VV : a | VV == v}"
75:9-75:11::r' :: "(Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree a b))"
75:14-75:34::_ :: "(Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree a b))"
75:19-75:20::lq_anf$##7205759403792805390 :: "GHC.Types.Int"
75:21-75:34::lq_anf$##7205759403792805391 :: "{v' : (Language.Haskell.Liquid.RTick.Tick {v : (BSTTick.Tree <\\x6 VV -> {VV : a | VV < x6}, \\x6 VV -> {VV : a | VV > x6}> a b) | size v == size r + 1\n                                                                                                                                 || size v == size r}) | tcost v' <= height r\n                                                                                                                                                         && v' == set r k v}"
75:26-75:27::r :: "{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV > k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == r}"
75:28-75:30::k :: "{VV : a | VV == k}"
75:31-75:33::v :: "{VV : a | VV == v}"
81:1-81:5::BSTTick.set' :: "forall a b .\n(GHC.Classes.Ord<[]> a) =>\nx2:(BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> a b) -> a -> b -> {t : (Language.Haskell.Liquid.RTick.Tick {VV : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> a b) | size VV == size x2 + 1\n                                                                                                                                                                                                                                 || size VV == size x2}) | tcost t <= height x2}"
81:10-81:11::k :: "a"
81:12-81:13::v :: "a"
81:16-81:29::$dOrd_a24K :: "{v : (GHC.Classes.Ord a) | v == $dOrd_a24K}"
81:26-81:27::k :: "{VV : a | VV == k}"
81:28-81:29::v :: "{VV : a | VV == v}"
83:7-83:9::k :: "{VV : a | VV == k}"
83:12-83:13::k :: "{VV : a | VV == k}"
83:19-83:81::Language.Haskell.Liquid.RTick.Tick :: "{VV : forall a .\n      x1:GHC.Types.Int -> x2:a -> {v : (Language.Haskell.Liquid.RTick.Tick a) | tval v == x2\n                                                                                && tcost v == x1\n                                                                                && v == Tick x1 x2} | VV == Tick}"
83:28-83:29::n :: "GHC.Types.Int"
83:30-83:32::l' :: "(BSTTick.Tree a b)"
83:35-83:55::_ :: "(Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree a b))"
83:40-83:41::lq_anf$##7205759403792805431 :: "GHC.Types.Int"
83:42-83:55::lq_anf$##7205759403792805432 :: "{v' : (Language.Haskell.Liquid.RTick.Tick {v : (BSTTick.Tree <\\x6 VV -> {VV : a | VV < x6}, \\x6 VV -> {VV : a | VV > x6}> a b) | size v == size l + 1\n                                                                                                                                 || size v == size l}) | tcost v' <= height l\n                                                                                                                                                         && v' == set l k v}"
83:47-83:48::l :: "{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV < k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == l}"
83:49-83:51::k :: "{VV : a | VV == k}"
83:52-83:54::v :: "{VV : a | VV == v}"
83:64-83:65::n :: "{v : GHC.Types.Int | v == n}"
83:66-83:81::lq_anf$##7205759403792805433 :: "{v' : (BSTTick.Tree a b) | tr v' == r\n                           && tl v' == l'\n                           && val v' == v\n                           && key v' == k\n                           && size v' == (1 + size l') + size r\n                           && height v' == 1 + (if height l' > height r then height l' else height r)\n                           && v' == Node k v l' r}"
83:72-83:73::k :: "{VV : a | VV == k}"
83:74-83:75::v :: "{VV : a | VV == v}"
83:76-83:78::l' :: "{v : (BSTTick.Tree a b) | height v >= 0\n                          && 0 <= height v\n                          && size v >= 0\n                          && 0 <= size v\n                          && v == l'}"
83:79-83:80::r :: "{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV > k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == r}"
84:7-84:9::k :: "{VV : a | VV == k}"
84:12-84:13::k :: "{VV : a | VV == k}"
84:19-84:81::Language.Haskell.Liquid.RTick.Tick :: "{VV : forall a .\n      x1:GHC.Types.Int -> x2:a -> {v : (Language.Haskell.Liquid.RTick.Tick a) | tval v == x2\n                                                                                && tcost v == x1\n                                                                                && v == Tick x1 x2} | VV == Tick}"
84:28-84:29::n :: "GHC.Types.Int"
84:30-84:32::r' :: "(BSTTick.Tree a b)"
84:35-84:55::_ :: "(Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree a b))"
84:40-84:41::lq_anf$##7205759403792805427 :: "GHC.Types.Int"
84:42-84:55::lq_anf$##7205759403792805428 :: "{v' : (Language.Haskell.Liquid.RTick.Tick {v : (BSTTick.Tree <\\x6 VV -> {VV : a | VV < x6}, \\x6 VV -> {VV : a | VV > x6}> a b) | size v == size r + 1\n                                                                                                                                 || size v == size r}) | tcost v' <= height r\n                                                                                                                                                         && v' == set r k v}"
84:47-84:48::r :: "{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV > k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == r}"
84:49-84:51::k :: "{VV : a | VV == k}"
84:52-84:54::v :: "{VV : a | VV == v}"
84:64-84:65::n :: "{v : GHC.Types.Int | v == n}"
84:66-84:81::lq_anf$##7205759403792805429 :: "{v' : (BSTTick.Tree a b) | tr v' == r'\n                           && tl v' == l\n                           && val v' == v\n                           && key v' == k\n                           && size v' == (1 + size l) + size r'\n                           && height v' == 1 + (if height l > height r' then height l else height r')\n                           && v' == Node k v l r'}"
84:72-84:73::k :: "{VV : a | VV == k}"
84:74-84:75::v :: "{VV : a | VV == v}"
84:76-84:77::l :: "{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV < k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == l}"
84:78-84:80::r' :: "{v : (BSTTick.Tree a b) | height v >= 0\n                          && 0 <= height v\n                          && size v >= 0\n                          && 0 <= size v\n                          && v == r'}"
85:19-85:39::Language.Haskell.Liquid.RTick.wait :: "{VV : forall a .\n      x1:a -> {v : (Language.Haskell.Liquid.RTick.Tick a) | x1 == tval v\n                                                            && 1 == tcost v\n                                                            && v == wait x1\n                                                            && v == Tick 1 x1} | VV == wait}"
85:24-85:39::lq_anf$##7205759403792805425 :: "{v' : (BSTTick.Tree a b) | tr v' == r\n                           && tl v' == l\n                           && val v' == v\n                           && key v' == k\n                           && size v' == (1 + size l) + size r\n                           && height v' == 1 + (if height l > height r then height l else height r)\n                           && v' == Node k v l r}"
85:30-85:31::k :: "{VV : a | VV == k}"
85:32-85:34::v :: "{VV : a | VV == v}"
85:35-85:36::l :: "{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV < k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == l}"
85:37-85:38::r :: "{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV > k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == r}"
91:1-91:4::BSTTick.get :: "forall a b .\n(GHC.Classes.Ord<[]> a) =>\nx2:(BSTTick.Tree <\\x2 VV -> {VV : a | VV < x2}, \\x2 VV -> {VV : a | VV > x2}> a b) -> a -> {t : (Language.Haskell.Liquid.RTick.Tick (Functions_Types.Maybe b)) | tcost t <= height x2}"
91:16-91:28::lq_anf$##7205759403792805343 :: "{v : (Functions_Types.Maybe a) | (isJust v <=> false)\n                                 && v == Nothing}"
91:21-91:28::_ :: "{VV : forall a .\n      {v : (Functions_Types.Maybe a) | (isJust v <=> false)\n                                       && v == Nothing} | VV == Nothing}"
93:7-93:10::ds_d2Zn :: "a"
93:13-93:14::k :: "{VV : a | VV == k}"
93:20-93:38::Language.Haskell.Liquid.RTick.step :: "{VV : forall a .\n      x1:GHC.Types.Int -> x2:(Language.Haskell.Liquid.RTick.Tick a) -> {v : (Language.Haskell.Liquid.RTick.Tick a) | tval x2 == tval v\n                                                                                                                     && x1 + tcost x2 == tcost v\n                                                                                                                     && v == step x1 x2\n                                                                                                                     && v == Tick (x1 + tcost x2) (tval x2)} | VV == step}"
93:25-93:26::lq_anf$##7205759403792805353 :: "GHC.Types.Int"
93:27-93:38::lq_anf$##7205759403792805354 :: "{v : (Language.Haskell.Liquid.RTick.Tick (Functions_Types.Maybe a)) | tcost v <= height l}"
93:32-93:33::l :: "{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV < k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == l}"
93:34-93:37::ds_d2Zn :: "a"
94:7-94:10::ds_d2Zn :: "a"
94:13-94:14::k :: "{VV : a | VV == k}"
94:20-94:38::Language.Haskell.Liquid.RTick.step :: "{VV : forall a .\n      x1:GHC.Types.Int -> x2:(Language.Haskell.Liquid.RTick.Tick a) -> {v : (Language.Haskell.Liquid.RTick.Tick a) | tval x2 == tval v\n                                                                                                                     && x1 + tcost x2 == tcost v\n                                                                                                                     && v == step x1 x2\n                                                                                                                     && v == Tick (x1 + tcost x2) (tval x2)} | VV == step}"
94:25-94:26::lq_anf$##7205759403792805350 :: "GHC.Types.Int"
94:27-94:38::lq_anf$##7205759403792805351 :: "{v : (Language.Haskell.Liquid.RTick.Tick (Functions_Types.Maybe a)) | tcost v <= height r}"
94:32-94:33::r :: "{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> {VV : a | VV > k} b) | height v >= 0\n                                                                                                       && 0 <= height v\n                                                                                                       && size v >= 0\n                                                                                                       && 0 <= size v\n                                                                                                       && v == r}"
94:34-94:37::ds_d2Zn :: "a"
95:19-95:32::Language.Haskell.Liquid.RTick.pure :: "{VV : forall a .\n      x1:a -> {v : (Language.Haskell.Liquid.RTick.Tick a) | x1 == tval v\n                                                            && 0 == tcost v\n                                                            && v == pure x1\n                                                            && v == Tick 0 x1} | VV == pure}"
95:24-95:32::lq_anf$##7205759403792805348 :: "{v' : (Functions_Types.Maybe a) | Just##lqdc##$select v' == v\n                                  && (isJust v' <=> true)\n                                  && fromJust v' == v\n                                  && v' == Just v}"
95:30-95:31::v :: "{VV : a | VV == v}"
106:1-106:8::BSTTick.getCost :: "forall a b .\n(GHC.Classes.Ord<[]> a) =>\nx2:(BSTTick.Tree <\\x2 VV -> {VV : a | VV < x2}, \\x2 VV -> {VV : a | VV > x2}> a b) -> x3:a -> {VV : () | tcost (get x2 x3) <= height x2}"
106:9-106:10::b :: "(BSTTick.Tree <\\x2 VV -> {VV : a | VV < x2}, \\x2 VV -> {VV : a | VV > x2}> a b)"
106:17-106:18::k :: "a"
107:6-107:21::lq_anf$##7205759403792805444 :: "GHC.Types.Int"
107:12-107:21::lq_anf$##7205759403792805443 :: "(Language.Haskell.Liquid.RTick.Tick (Functions_Types.Maybe a))"
107:17-107:18::lq_anf$##7205759403792805441 :: "{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> a b) | height v >= 0\n                                                                                       && 0 <= height v\n                                                                                       && size v >= 0\n                                                                                       && 0 <= size v\n                                                                                       && v == b\n                                                                                       && size v == 0\n                                                                                       && height v == 0\n                                                                                       && v == Nil}"
107:19-107:20::k :: "{VV : a | VV == k}"
108:8-108:28::lq_anf$##7205759403792805447 :: "GHC.Types.Int"
108:14-108:28::lq_anf$##7205759403792805446 :: "{v : (Language.Haskell.Liquid.RTick.Tick (Functions_Types.Maybe (GHC.Types.Any (TYPE 'GHC.Types.LiftedRep)))) | 0 == tcost v}"
108:20-108:27::_ :: "{VV : forall a .\n      {v : (Functions_Types.Maybe a) | (isJust v <=> false)\n                                       && v == Nothing} | VV == Nothing}"
109:8-109:30::lq_anf$##7205759403792805453 :: "GHC.Types.Int"
109:14-109:30::lq_anf$##7205759403792805452 :: "(Language.Haskell.Liquid.RTick.Tick (Functions_Types.Maybe (GHC.Types.Any (TYPE 'GHC.Types.LiftedRep))))"
109:20-109:21::lq_anf$##7205759403792805450 :: "GHC.Types.Int"
109:22-109:29::_ :: "{VV : forall a .\n      {v : (Functions_Types.Maybe a) | (isJust v <=> false)\n                                       && v == Nothing} | VV == Nothing}"
110:8-110:9::lq_anf$##7205759403792805456 :: "GHC.Types.Int"
111:8-111:16::lq_anf$##7205759403792805458 :: "{v : GHC.Types.Int | v >= 0}"
111:15-111:16::lq_anf$##7205759403792805441 :: "{v : (BSTTick.Tree <\\x4 VV -> {VV : a | VV < x4}, \\x4 VV -> {VV : a | VV > x4}> a b) | height v >= 0\n                                                                                       && 0 <= height v\n                                                                                       && size v >= 0\n                                                                                       && 0 <= size v\n                                                                                       && v == b\n                                                                                       && size v == 0\n                                                                                       && height v == 0\n                                                                                       && v == Nil}"
112:8-112:11::Language.Haskell.Liquid.ProofCombinators.QED :: "{v : Language.Haskell.Liquid.ProofCombinators.QED | v == QED}"
120:1-120:6::BSTTick.tree1 :: "(BSTTick.Tree <\\x2 VV -> {VV : GHC.Types.Int | VV < x2}, \\x2 VV -> {VV : GHC.Types.Int | VV > x2}> GHC.Types.Int [GHC.Types.Char])"
120:14-120:82::lq_anf$##7205759403792805514 :: "(Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree <\\x10 VV -> {v : GHC.Types.Int | v < v}, \\x10 VV -> {v : GHC.Types.Int | v > v}> GHC.Types.Int [GHC.Types.Char]))"
120:20-120:70::lq_anf$##7205759403792805509 :: "(BSTTick.Tree GHC.Types.Int [GHC.Types.Char])"
120:27-120:68::lq_anf$##7205759403792805508 :: "(Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree <\\x10 VV -> {v : GHC.Types.Int | v < v}, \\x10 VV -> {v : GHC.Types.Int | v > v}> GHC.Types.Int [GHC.Types.Char]))"
120:32-120:58::lq_anf$##7205759403792805503 :: "(BSTTick.Tree GHC.Types.Int [GHC.Types.Char])"
120:38-120:56::lq_anf$##7205759403792805502 :: "(Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree <\\x10 VV -> {v : GHC.Types.Int | v < v}, \\x10 VV -> {v : GHC.Types.Int | v > v}> GHC.Types.Int [GHC.Types.Char]))"
120:43-120:46::_ :: "{VV : forall a b <r :: a a -> Bool, l :: a a -> Bool>.\n      {v : (BSTTick.Tree <\\x4 VV -> {VV : a<l x4> | true}, \\x4 VV -> {VV : a<r x4> | true}> a b) | size v == 0\n                                                                                                   && height v == 0\n                                                                                                   && v == Nil} | VV == Nil}"
120:47-120:49::lq_anf$##7205759403792805499 :: "GHC.Types.Int"
120:50-120:55::lq_anf$##7205759403792805501 :: "[GHC.Types.Char]"
120:59-120:61::lq_anf$##7205759403792805505 :: "GHC.Types.Int"
120:62-120:67::lq_anf$##7205759403792805507 :: "[GHC.Types.Char]"
120:71-120:73::lq_anf$##7205759403792805511 :: "GHC.Types.Int"
120:74-120:81::lq_anf$##7205759403792805513 :: "[GHC.Types.Char]"
126:1-126:5::BSTTick.test :: "() -> {VV : GHC.Types.Bool | VV}"
126:12-126:32::lq_anf$##7205759403792805537 :: "GHC.Types.Int"
126:18-126:32::lq_anf$##7205759403792805536 :: "{v : (Language.Haskell.Liquid.RTick.Tick (Functions_Types.Maybe [GHC.Types.Char])) | tcost v <= height tree1}"
126:23-126:28::BSTTick.tree1 :: "{v : (BSTTick.Tree <\\x10 VV -> {v : GHC.Types.Int | v < v}, \\x10 VV -> {v : GHC.Types.Int | v > v}> GHC.Types.Int [GHC.Types.Char]) | v == tree1\n                                                                                                                                      && v == tval (set (tval (set (tval (set Nil 10 \"cat\")) 20 \"dog\")) 30 \"zebra\")\n                                                                                                                                      && height v >= 0\n                                                                                                                                      && 0 <= height v\n                                                                                                                                      && size v >= 0\n                                                                                                                                      && 0 <= size v}"
126:29-126:31::lq_anf$##7205759403792805535 :: "GHC.Types.Int"
126:36-126:48::lq_anf$##7205759403792805538 :: "{v : GHC.Types.Int | v == height tree1\n                     && v >= 0}"
126:43-126:48::BSTTick.tree1 :: "{v : (BSTTick.Tree <\\x10 VV -> {v : GHC.Types.Int | v < v}, \\x10 VV -> {v : GHC.Types.Int | v > v}> GHC.Types.Int [GHC.Types.Char]) | v == tree1\n                                                                                                                                      && v == tval (set (tval (set (tval (set Nil 10 \"cat\")) 20 \"dog\")) 30 \"zebra\")\n                                                                                                                                      && height v >= 0\n                                                                                                                                      && 0 <= height v\n                                                                                                                                      && size v >= 0\n                                                                                                                                      && 0 <= size v}"
133:1-133:6::BSTTick.tree2 :: "(BSTTick.Tree <\\x2 VV -> {VV : GHC.Types.Int | VV < x2}, \\x2 VV -> {VV : GHC.Types.Int | VV > x2}> GHC.Types.Int [GHC.Types.Char])"
133:14-133:92::lq_anf$##7205759403792805532 :: "(Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree <\\x10 VV -> {v : GHC.Types.Int | v < v}, \\x10 VV -> {v : GHC.Types.Int | v > v}> GHC.Types.Int [GHC.Types.Char]))"
133:21-133:80::lq_anf$##7205759403792805527 :: "(BSTTick.Tree GHC.Types.Int [GHC.Types.Char])"
133:28-133:78::lq_anf$##7205759403792805526 :: "(Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree <\\x10 VV -> {v : GHC.Types.Int | v < v}, \\x10 VV -> {v : GHC.Types.Int | v > v}> GHC.Types.Int [GHC.Types.Char]))"
133:34-133:64::lq_anf$##7205759403792805521 :: "(BSTTick.Tree GHC.Types.Int [GHC.Types.Char])"
133:40-133:62::lq_anf$##7205759403792805520 :: "(Language.Haskell.Liquid.RTick.Tick (BSTTick.Tree <\\x10 VV -> {v : GHC.Types.Int | v < v}, \\x10 VV -> {v : GHC.Types.Int | v > v}> GHC.Types.Int [GHC.Types.Char]))"
133:46-133:49::_ :: "{VV : forall a b <r :: a a -> Bool, l :: a a -> Bool>.\n      {v : (BSTTick.Tree <\\x4 VV -> {VV : a<l x4> | true}, \\x4 VV -> {VV : a<r x4> | true}> a b) | size v == 0\n                                                                                                   && height v == 0\n                                                                                                   && v == Nil} | VV == Nil}"
133:50-133:51::lq_anf$##7205759403792805517 :: "GHC.Types.Int"
133:52-133:61::lq_anf$##7205759403792805519 :: "[GHC.Types.Char]"
133:65-133:67::lq_anf$##7205759403792805523 :: "GHC.Types.Int"
133:68-133:77::lq_anf$##7205759403792805525 :: "[GHC.Types.Char]"
133:81-133:82::lq_anf$##7205759403792805529 :: "GHC.Types.Int"
133:83-133:91::lq_anf$##7205759403792805531 :: "[GHC.Types.Char]"
137:1-137:6::BSTTick.test2 :: "() -> {VV : GHC.Types.Bool | VV}"
137:12-137:44::lq_anf$##7205759403792805545 :: "GHC.Types.Int"
137:18-137:44::lq_anf$##7205759403792805544 :: "{v : (Language.Haskell.Liquid.RTick.Tick {v : (BSTTick.Tree <\\x12 VV -> {v : GHC.Types.Int | v < v}, \\x12 VV -> {v : GHC.Types.Int | v > v}> GHC.Types.Int [GHC.Types.Char]) | size v == size tree2 + 1\n                                                                                                                                                                               || size v == size tree2}) | tcost v <= height tree2}"
137:24-137:29::BSTTick.tree2 :: "{v : (BSTTick.Tree <\\x10 VV -> {v : GHC.Types.Int | v < v}, \\x10 VV -> {v : GHC.Types.Int | v > v}> GHC.Types.Int [GHC.Types.Char]) | v == tree2\n                                                                                                                                      && v == tval (set' (tval (set' (tval (set' Nil 5 \"siamese\")) 18 \"bobtail\")) 3 \"sphinx\")\n                                                                                                                                      && height v >= 0\n                                                                                                                                      && 0 <= height v\n                                                                                                                                      && size v >= 0\n                                                                                                                                      && 0 <= size v}"
137:30-137:32::lq_anf$##7205759403792805541 :: "GHC.Types.Int"
137:33-137:43::lq_anf$##7205759403792805543 :: "[GHC.Types.Char]"
137:48-137:60::lq_anf$##7205759403792805546 :: "{v : GHC.Types.Int | v == height tree2\n                     && v >= 0}"
137:55-137:60::BSTTick.tree2 :: "{v : (BSTTick.Tree <\\x10 VV -> {v : GHC.Types.Int | v < v}, \\x10 VV -> {v : GHC.Types.Int | v > v}> GHC.Types.Int [GHC.Types.Char]) | v == tree2\n                                                                                                                                      && v == tval (set' (tval (set' (tval (set' Nil 5 \"siamese\")) 18 \"bobtail\")) 3 \"sphinx\")\n                                                                                                                                      && height v >= 0\n                                                                                                                                      && 0 <= height v\n                                                                                                                                      && size v >= 0\n                                                                                                                                      && 0 <= size v}"